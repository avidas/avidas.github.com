<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Node.js | Avi Das]]></title>
  <link href="http://avidas.github.com/blog/categories/node-js/atom.xml" rel="self"/>
  <link href="http://avidas.github.com/"/>
  <updated>2019-02-18T10:59:01-05:00</updated>
  <id>http://avidas.github.com/</id>
  <author>
    <name><![CDATA[Avi (Ananya Das)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Building Realtime Apps with React, Socket.io and Node.js]]></title>
    <link href="http://avidas.github.com/blog/2015/09/06/building-realtime-apps-with-react/"/>
    <updated>2015-09-06T11:16:00-04:00</updated>
    <id>http://avidas.github.com/blog/2015/09/06/building-realtime-apps-with-react</id>
    <content type="html"><![CDATA[<blockquote><p>Update: Udemy has generously granted a free coupon for the readers of this blog for their <a href="https://www.udemy.com/learn-and-understand-reactjs/learn/">React JS and Flux</a> course. Use the code <code>avidasreactjs</code> and the first 50 readers will get free access to the course!</p></blockquote>

<p>The importance of delivering realtime feedback to users is more than ever. Gone are the days when chats or games were the only applications of realtime software. Starting from finance, advertising or education, having a realtime component to your web application will elevate the user experience.</p>

<h3>Socket.io</h3>

<p>From <a href="http://socket.io/">socket.io's homepage</a>, it is a library that enables real-time bidirectional event-based communication. It has two parts, a client side library that runs in the browser and a server side library for node.js. In recent times, this has become the de facto way of doing realtime web applications in the node.js world. Key reasons behind this has been the way it abstracts away the overhead of maintaining multiple protocols, while carrying on similar primitives from <a href="https://nodejs.org/api/stream.html">Node streams</a> and <a href="https://nodejs.org/api/events.html">eventEmitter</a>. Some of its other powerful features include being able to stream Binary data, broadcast to multiple sockets and being able to manage connected client data from the server.</p>

<h3>Architecture</h3>

<p>The WebSocket protocol is a W3C standard that enables interactive communication between browser and server. It functions as an Upgrade request over HTTP 1.1. However, since all legacy browsers and devices do not have support for WebSockets, it's cross-platform abilities get limited.</p>

<p>Socket.io itself is a library to build realtime applications. It will try to upgrade to and use the Websocket protocol if available. Socket.io depends on another libray called Engine.io which exposes a Websocket like API but provides fallbacks to other transport mechanisms such as XHR and JSONP polling. This enables application developers to write realtime codebases that are browser, device and transport implementation independent.</p>

<h3>Getting started with Socket.io</h3>

<p>This tutorial assumes that you have Node.js, npm and Express on your system.</p>

<p>In a directory create two files called index.html and app.js. In your app.js file, add the following</p>

<p>```javascript
var app = require('express')();
var server = require('http').Server(app);
var swig = require('swig');
var path = require('path');</p>

<p>// view engine setup
app.engine('html', swig.renderFile);
app.set('view engine', 'html');</p>

<p>// server and routing
server.listen(8080);
app.get('/', function (req, res) {
  res.render('index');
});
```</p>

<p>We set up the view engine and serve up a basic index page. If this part looks unfamiliar, please check out <a href="http://expressjs.com/guide/routing.html">Express docs</a>. Now add the following in app.js.</p>

<p>```javascript
var io = require('socket.io')(server);
// socket.io demo
io.on('connection', function (socket) {
  socket.emit('server event', { foo: 'bar' });
  socket.on('client event', function (data) {</p>

<pre><code>console.log(data);
</code></pre>

<p>  });
});
```
 We create a new instance of socket.io and pass in the created express server as a parameter. As the server listens, whenever a new client starts a connection, we emit an event called server event and send the payload { foo : 'bar' }. It also listens for 'client event' and logs the payload once it gets the event.</p>

<p>In your index.html file add the following
```html</p>

<script src="http://avidas.github.com/socket.io/socket.io.js"></script>


<script>
  var socket = io();
  socket.on('server event', function (data) {
    console.log(data);
    socket.emit('client event', { socket: 'io' });
  });
</script>


<p>```
It includes the client side socket io library. After instantiating a new connection, it listens for the 'server event' and when that event happens it logs the data and emits 'client event' and sends the payload { socket: 'io'}.</p>

<p>Run node app.js and fire up localhost:8080 in your browser. On the terminal you should see { socket: 'io' } and on the console you should see { foo : 'bar' } printed out. Congrats, you just did your first Socket.io app!</p>

<h3>Useful Socket.io Concepts</h3>

<h5>Message sending/receiving</h5>

<p>Socket.IO allows you to emit and receive custom events. Besides connect, message and disconnect, you can emit custom events and send with associated payload. Emit and Broadcast are ways to send events and on is the event listener.</p>

<h5>Server vs Client API</h5>

<p>There are some common functions between server and client side, but it is worth looking into the docs and understanding what is possible on the server vs client. Generally, the server side has much more features and capabilites and is capable of creating rooms and namespaces but both sides and send and respond to events.</p>

<h5>Rooms and Namespaces</h5>

<p>Socket.io provides built in abstractions to demultiplex the connected clients. Namespaces, identified by a path, can be connected via the following</p>

<p><code>javascript
var socket = io(); //connects to default namespace "/"
var admin = io("/admin"); //connects to the namespace specified by the path "/path"
</code></p>

<p>After a client connects with <code>var socket = io('/admin')</code> , we can send message only to the admin namespace.</p>

<p><code>javascript
admin.emit("admin alert", "website traffic is up!"); //the event will only be sent to the clients who connected to the admin namespace
</code></p>

<p>This enables more role or other criteria based distribution of socket.io events/messages within your application.</p>

<p>Rooms provide a way to further divide up clients within individual namespaces. Clients within a namespace can join and leave a room. By default, a client always is connected to a room idenfied by the sockets id. Hence it is possible to send targeted messages to a connected client via <code>socket.broadcast.to(&lt;SOCKET.ID&gt;).emit('test', 'message')</code>. Rooms could make more sense for particular themes whereas namespaces seem to fit well for user type/responsibilities.</p>

<h3>React and Socket.io</h3>

<p>Now for the exciting part, integrating React.js and Socket.io into an application. React.js is Javascript UI framework from facebook. You can follow some of the <a href="https://facebook.github.io/react/">initial docs</a> to get started with React. This tutorial will not go into great detail into the terminologies of React.js but refer to the official documentation if any of the React syntax looks confusing.</p>

<p>The basic idea of the app is to have an html input and a label. When someone types in something into the input box, it will update the label for anyone else who have an window open except for the person typing.</p>

<h5>Client side code</h5>

<p>Let's start by changing your index.html to the following</p>

<p>```html
&lt;!DOCTYPE html>
<html>
  <head></p>

<pre><code>&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/react/0.13.2/react.min.js"&gt;&lt;/script&gt;
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/react/0.13.2/JSXTransformer.js"&gt;&lt;/script&gt;
&lt;script src="http://avidas.github.com/socket.io/socket.io.js"&gt;&lt;/script&gt;
</code></pre>

<p>  </head>
  <body></p>

<pre><code>&lt;div id="mount-point"&gt;&lt;/div&gt;
&lt;div id="label-mount-point"&gt;&lt;/div&gt;
&lt;script type="text/jsx"&gt;
 /** @jsx React.DOM */
var socket = io();

var Input = React.createClass({
  _notifyServer: function(event){
    socket.emit('client event', { value: event.target.value });
  },
  render: function(){
    return (
      &lt;div className="update-label"&gt;
        &lt;input type="text" placeholder="Enter text" onChange={this._notifyServer}/&gt;
      &lt;/div&gt;
    );
  }
});
var Label = React.createClass({
  _onUpdateLabel: function(data) {
    this.setState(serverValue: data.value);
  },
  getInitialState: function(){
    return { serverValue: '' };
  },
  render: function(){
    return (
      &lt;div class="my-label"&gt;
        &lt;h2&gt;{this.state.serverValue}&lt;/h2&gt;
      &lt;/div&gt;
    )
  }
});
var input = React.render(&lt;Input/&gt;, document.getElementById('mount-point'));
var label = React.render(&lt;Label/&gt;, document.getElementById('label-mount-point'));
socket.on('update label', function (data) {
  label._onUpdateLabel(data);
});
&lt;/script&gt;
</code></pre>

<p>  </body>
</html>
```</p>

<h5>Server side</h5>

<p>The server side of the codebase can mostly stay the same, except we broadcast 'update label' when 'client event' is received.</p>

<p>```javascript
io.on('connection', function (socket) {
  socket.emit('server event', { foo: 'bar' });
  socket.on('client event', function (data) {</p>

<pre><code>socket.broadcast.emit('update label', data);
</code></pre>

<p>  });
});
```</p>

<h5>Explanation</h5>

<p>On the client side, two React components called Input and Label are created and mounted by calling React.render. Input renders an html input box which calls the <em>notifyServer method whenever the someone types into the input field. The </em>notifyServer method then emits socket.io event called 'client event' with the value of the input box.</p>

<p>On the server side, when 'client event' is received with the data, the server calls socket.broadcast.emit and passes the data payload along. This means that all the connected clients except for the socket that generated 'client event' will receive the 'update label' event and the payload. This sends the message to everyone except for the person typing.</p>

<p>Back to the client side, the Label component consists on a div with a h2 element with is set to the serverValue state of the component. <a href="https://facebook.github.io/react/docs/component-specs.html#getinitialstate">getInitialState</a> sets the initial value to be '' so initially the Label is empty. When 'update label' is received, we call the _onUpdateLabel on label, which is an instance of Label. It sets the serverValue state of the Label component to data.value. This invokes the render method of the label component, and it generates a h2 header with the updated value of the serverValue.</p>

<!-- more -->


<h3>Advantages of Socket.io</h3>

<p>Many advantages of socket.io are</p>

<ol>
<li>The simplicity of the integration. Rolling your own realtime library is considerably more difficult due to multi-protocol, browser and device requirements.</li>
<li>Large community of users and support in multiple platforms. It is used from large companies to small startups, meaning developer support is in abundance. Socket.io released native clients on iOS and Android this year, expanding its reach.</li>
<li>It is stable as 1.0.0 has been released in 2014</li>
<li>It is completely free</li>
</ol>


<h3>Disadvantages of Socket.io</h3>

<ol>
<li>Socket.io has its own protocol, and it would not work with any custom Websocket implementation by default. The team has worked on this and support for this is getting better http://socket.io/docs/#using-it-just-as-a-cross-browser-websocket</li>
<li>Scaling across multiple servers when you have too many open connections for a single server is not something that you will get out of the box with socket.io</li>
<li>As with Realtime software, debugging can be complicated and you may need to include Redis or other layers of persistance if you want to gurantee message delivery</li>
</ol>


<p>Realtime on web and mobile is a secret sauce for many websites and apps these days and Socket.io is a dominant technology in that field. There are entire startups which would not be possible without Socket.io and definitely deserves a place in any web/mobile developers skills of expertise.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Browserify improves Client-side Development]]></title>
    <link href="http://avidas.github.com/blog/2015/07/16/how-browserify-improves-client-side-development/"/>
    <updated>2015-07-16T14:41:00-04:00</updated>
    <id>http://avidas.github.com/blog/2015/07/16/how-browserify-improves-client-side-development</id>
    <content type="html"><![CDATA[<h4>For a more modular, maintainable Frontend</h4>

<p>As Single Page Applications gain in popularity, the size of front end codebases keeps growing rapidly. For keeping these codebases maintainable, modularity becomes a priority. The easier it is to modularize code, the more incentives developers will have for doing so. With the ease of modularity with CommonJS, npm has seen explosive growth of packages published which has helped the Node ecosystem greatly. Browserify brings that ease to client side development leveraging the CommonJS module system. When used with build tools such as Grunt or Gulp, you can write modular client side code just like you would write your server side Node code, and Browserify takes care of the bundling for you. There is much less excuse these days to make everything global and attach to the window object!</p>

<h4>Leveraging npm modules</h4>

<p><img class="left" src="/images/Modulecounts.jpg" width="800" height="670" title="Package Manager Traction" alt="Package Manager Traction"></p>

<p>Looking at the graph above is a big selling point when trying to evaluate the value Browserify can bring to your client side workflow. The graph is a comparison of the rate at which packages are getting published in different package managers Bower, PyPI, RubyGems. npm leads the pack easily. Recently, jQuery registry stopped accepting new plugins, with <a href="http://blog.npmjs.org/post/111475741445/publishing-your-jquery-plugin-to-npm-the-quick">new packages being published on npm</a>. Cordova recently announced the same change, moving plugins to npm. npm is now hosting much broader range of modules than only server-side Node.js modules and Browserify can help you leverage these modules on the front-end. The flipside of this as a module publisher is that publishing modules on npm now gives you access to a much broader audience since people might use the module on the browser, custom hardware etc.</p>

<h4>How it works</h4>

<p>In the CommonJS syntax, the "exports" object is the public API of a module and "require" can be used to include a module in your javascript file. Since browsers do not have require available, Browserify traverses the <a href="https://github.com/substack/browserify-handbook#how-browserify-works">dependency trees</a> of all the required modules, and bundles the dependencies into one self contained file that you can just include with a script tag on the browser. Browserify is aware of package.json and the order in which node_modules are resolved. Moreover, it supports built in Node modules e.g. path and gloabls e.g. Buffer so you have access of those in the client side as well.</p>

<h4>Transforms</h4>

<p>Core Browserify only bundles modules written in the CommonJS syntax, adhering to the single responsibility principle. However, there are other ways of modularizing client side code, AMD and Global Variables being the two usual ones. Instead of handling every possibly of modules, Browserify exposes a Transforms API so that a plugin can be built which can preprocess a file into Javascript in CommonJS syntax which Browserify can then consume. This means that you can write modular code just like your node codebases regardless of what module system your dependencies may adhere to. There are also lot of people writing in languages that compile into Javascript, such as CoffeeScript or TypeScript. To handle this, there are transforms available for AMD (deamdify), Bower modules (debowerify), globals (deglobalify), coffeescript(coffeeify), harmony (es6ify) etc. A simple search of Browserify on Github or npm brings up thousands of modules and attests to the <a href="https://github.com/substack/node-browserify/wiki/list-of-transforms">ecosystem around Browserify</a>. Delegating to transforms helps to keep the footprint of Browserify smaller, while makes it more extensible.</p>

<!-- more -->


<h4>Using with Build Tools</h4>

<p>Software is great when it just works and you do not have tinker with it all the time. Grunt/Gulp are great for this kind of configure once, build whenever workflow. Browserify is available as a command line tool primarily, but has Grunt and Gulp plugins which can be used to easily integrate Browserify into your build. There is also watchify, which can reduce build time by monitoring source files and incrementally rebuilding the front end bundle on the fly. For large projects, this is really useful to keep the build times small.</p>

<h4>Alternatives</h4>

<p>There are always alternatives available in the JavaScript world, and Webpack, RequireJS and Component being some of the major ones. RequireJS has been around for longer and primarily supports the AMD specification, but has support for CommonJS too. Webpack tends to do better with static assets that your client side requires and tries to cover a broader issue of bundling all static assets. With picking any tool, it's good to be aware of the alternatives, the problem they were designed to solve, and benefits and drawbacks of each. It makes for <a href="https://gist.github.com/substack/68f8d502be42d5cd4942">quite interesting debate</a> at times as well.</p>

<h4>Resources</h4>

<p>Browserify has really good documentation and the <a href="https://github.com/substack/browserify-handbook">browserify handbook</a> is a great resource for an extensive runthrough. For getting started, the nodeschool module called <a href="https://github.com/substack/browserify-adventure">browserify-adventure</a> is very handy.</p>

<h4>Conclusion</h4>

<p>The browser community is unlikely to adopt a module system anytime soon. Harmony/ES6 includes a module definition but it will take time before it gets adopted by all the browsers. Moreover, there have been <a href="https://esdiscuss.org/topic/es6-modules-sorry">resistance from some notable developers</a>.</p>

<p>Browserify offers a great way to abstract away that issue. With access to a vast amount of modules, there is much less of a need for reinventing the wheel on the client side, and fewer script tags thrown around everywhere. Client side software development is evolving fast, and Browserify has made significant progress to minimize some of that complexity.</p>

<p>If you are using browserify/webpack in production, I would love to know the tradeoffs/issues you have ran into. Comments/feedback here or <a href="mailto:avi@aviadas.com">contact</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nodeconf 2015: Unconf with the right intentions]]></title>
    <link href="http://avidas.github.com/blog/2015/06/14/nodeconf-unconf-with-the-right-intentions/"/>
    <updated>2015-06-14T16:28:00-04:00</updated>
    <id>http://avidas.github.com/blog/2015/06/14/nodeconf-unconf-with-the-right-intentions</id>
    <content type="html"><![CDATA[<p>Conferences can be a great way to get the creative juices flowing, meet people in the community and share stories and problems. They offer great opportunities to learn from core developers building the frameworks that your software depends on.</p>

<p>Nodeconf managed to achieve all this, in the rather unusual form of an unconference. An unconference meant that the structure and events/presentations and talks at the conference were left to be decided by the community rather than a committee. That does make Nodeconf a conference not for everyone. Understanding the format and structure of Nodeconf is important before you make the hike to Walnut Creek Ranch next year.</p>

<p>I thought to distill down the reasons why you might or might not be interested in attending Nodeconf as well as get the most out of it. You might be interested in Nodeconf if you</p>

<ol>
<li><p><strong>Build for the web</strong>: For a lot of attendees, Nodeconf would feel like living in the future as a lot of attendees are very involved in making the decisions and tradeoff that would shape the future of the web. Specially discussions around packaging and parceling front end assets in npm (Modular UI) was really interesting as was Isomorphic JS, which covered the challenges involved in writing identical client and server side code. The JavaScript landscape is a fast evolving one and Nodeconf offers fantastic perspective on how the decision making can work.</p></li>
<li><p><strong>Publish on npm/github</strong>: As someone who maintains projects on npm and github, the discussions around distributing node modules were very insightful. Issues such as broadening adoption, getting contributors for github modules and standards for publishing on npm came up and maintainers of hugely popular modules shared their experiences. Picking a good module scope, having really good examples for beginners to start with and publishing with concise yet searchable package descriptions were all emphasized.</p></li>
</ol>


<!-- more -->


<ol>
<li><p><strong>Foster community growth</strong>: The node community is certainly dealing with the growing pains that comes with success. Having a well defined process for integrating new members is really important for large codebases. Broadening mentorship was considered as a possibility for guiding new members through the steep learning curve.</p></li>
<li><p><strong>Want to get a deeper understanding of Node Core and APIs</strong>: There was unparalleled opportunity to discuss Node core/API and critical libraries such as libuv with the core developers. This was also true for external node libraries, and it can be certainly valuable to take a set of well defined problems that you have on your Node codebases as you are bound to make progress in such an environment.</p></li>
</ol>


<p>You might not be interested in Nodeconf if</p>

<ol>
<li><p><strong>You expect Nodeconf to be a 3 day training session on Node</strong>: While Nodeconf was full of illuminating discussions and presentations, it was certainly not a series of tutorials on Node.</p></li>
<li><p><strong>You expect a traditional conference structure</strong>: It did not take place on a hotel, rather a ranch and certainly does not have some of the glamour associated with WWDC or Google I/O.</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Realtime user monitoring and targeting platform with Node, Express and Socket.io]]></title>
    <link href="http://avidas.github.com/blog/2015/06/06/building-realtime-user-monitoring-and-targeting-platform-with-node/"/>
    <updated>2015-06-06T15:31:00-04:00</updated>
    <id>http://avidas.github.com/blog/2015/06/06/building-realtime-user-monitoring-and-targeting-platform-with-node</id>
    <content type="html"><![CDATA[<p>Being able to target users and send targeted notifications can be key to turn visitors into conversions and tighten your funnel. Offerings such as mailchimp and mixpanel offer ways to reach out to users but in most of those cases you only get to do them in post processing. However, there are situations when it would be really powerful is to be able to track users as they are navigating your website and send targeted notifications to them.</p>

<h3>Use Cases</h3>

<p>Imagine that a buyer is looking for cars to buy and is interested in vehicles of a particular model and brand. It is very likely that he/she will visit several sites to compare prices. If there are a few results the buyer has looked at already, there may be an item which would fit the profile of this user. If you are able to prompt and reach out as the user is browsing through several results, it could make the difference between a sale and user buying from a different site. This is particularly useful for high price, high options scenerios e.g. Real Estate/Car/Electronics purchases. For use cases where the price is low or the options are fewer, e.g. a SAAS offering with a 3 tiers, this level of fine grained tracking may not be necessary. However, if you have a fledgling SAAS startup, you may want to do this in the spirit of <a href="http://paulgraham.com/ds.html">doing things that don't scale</a>.</p>

<h3>Prerequisites</h3>

<p>This article assumes that you have <a href="https://nodejs.org/">node and npm</a> installed on your system. It would be also be useful to get familiar with <a href="http://expressjs.com/">Express.js</a>, the de facto web framework on top of Node.js. <a href="http://socket.io/">Socket.io</a> is a Node.js module that abstracts WebSocket, JSON Polling and other protocols to enable simultaneous bi directional communication between connected parties. This article makes heavy use of Socket.io terminology, so it would be good to be familiar with sending and receiving events, broadcasts, namespaces and rooms.</p>

<h3>Install and run</h3>

<p>Start by git cloning the repo, install dependencies and run the app.</p>

<p><code>bash
git clone git@github.com:avidas/socketio-monitoring.git
cd socketio-monitoring
npm install
npm start
</code></p>

<p>By default this will start the server at port 8080. navigate to localhost:8080/admin on a browser e.g Chrome. Now, on a different browser, e.g. Firefox, navigate to localhost:8080 and browse around. You will see that the admin page gets updated with the url endpoints as you navigate your way through the website in firefox. You can even send an alert to the user on Firefox by pressing the send offer button on Chrome!</p>

<h3>Walkthrough</h3>

<p>Let's get into how this works. When an admin visits localhost:8080/admin, she joins a Socket.io namespace called adminchannel.</p>

<p><code>javascript
var adminchannel = io.of('/adminchannel');
</code></p>

<p>When a new user visits a page, we get the <a href="https://github.com/expressjs/session#reqsession">express sessionID</a> of the user by calling req.sessionID and pass it to the templating engine for rendering. The session id ensures that we can identify a user across pages and browser tabs.</p>

<p><code>javascript
res.render('index', {a:req.sessionID});
</code></p>

<p>The template sets the value of sessionID as a hidden input field on the page, with the id "user_session_id".</p>

<p>```html
<body>
<input type="hidden" id="user_session_id" value="<%= a %>" />
  <div id="device" style="font-size: 45px;">2015 Tesla Cars</div></p>

<pre><code>&lt;a href="http://avidas.github.com/about"&gt;About&lt;/a&gt;
</code></pre>

<p>  <br />
  <a href="http://avidas.github.com/">Home</a>
</body>
```
After the page has loaded, it will emit a pageChange socket.io event. Accompanying the event is the url endpoint for the current page and sessionID.</p>

<p>```javascript
  var userSID = document.getElementById('user_session_id').value;
  var socket = io();</p>

<p>  var userData = {</p>

<pre><code>page: currentURL,
sid: userSID
</code></pre>

<p>  }
  socket.emit('pageChange', userData);
```
On server side, when pageChange is received, a Socket.io event called alertAdmin is sent to the adminchannel namespace. This ensures that only the admins are alerted that user with particular session id and particular socket id has navigated to a different page. Since anyone with access to /admin endpoint will join the adminchannel namespace, this can easily scale to multiple admins.</p>

<p>```javascript
  socket.on('pageChange', function(userData){</p>

<pre><code>userData.socketID = socket.id;
userData.clientIDs = clientIDs;
console.log('user with sid ' + userData.sid + ' and session id ' + userData.socketID + ' changed page ' + userData.page);
adminchannel.emit('alertAdmin', userData);
</code></pre>

<p>  });
```</p>

<p>When altertAdmin is received on the client side, the UI dashboard is updated so that the admins have a realtime dashboard of users navigating the site. This is done via Jquery which appends each new page change to a html list as users navigate through the site.</p>

<p>```javascript
  adminsocket.on('alertAdmin', function(userData){</p>

<pre><code>var panel = document.getElementById('panel');
var val = " User with session id " + userData.sid + " and with socket id " + userData.socketID + " has navigated to " + userData.page;
userDataGlob = userData;
var list = $('&lt;ul/&gt;').appendTo('#panel');
//Dynamic display of users interacting on your website
$("#panel ul").append('&lt;li&gt; ' + val + ' &lt;button type="button" class="offerClass" id="' + userData.socketID + '"&gt;Send Offer&lt;/button&gt;&lt;/li&gt;');
</code></pre>

<p>  });
<code>
Now, the admin may choose to send certain notifications to the particular user. When the admin clicks on the "Send Offer" button, a socket.io event called adminMessage is sent to the general namespace on the server with the user specific data.
</code>javascript
  //Allow admin to send adminMessage
  $('body').on('click', '.offerClass', function () {</p>

<pre><code>socket.emit('adminMessage', userDataGlob);
</code></pre>

<p>  });
```
When adminMessage is received on the server side, we broacast to the specific user the message. Since every user always joins into a room identified by their socketID, we can send a notification only to that user by using socket.broadcast.to(userData.socketID) and we send an event called adminBroadcast with the data.</p>

<p>Here, you could have chosen to broadcast a message to all the users, or to a particular room, which subsets of users could have joined. Thus, you can fine tune how you want to reach out to users as well.</p>

<p>```javascript
  socket.on('adminMessage', function(userData) {</p>

<pre><code>socket.broadcast.to(userData.socketID).emit('adminBroadcast', userData);
</code></pre>

<p>  });
```</p>

<p>Finally on the client side of the user when adminBroadcast is received, the user is alterted with a notification. However, you can easily use it for more complex use cases such as dynamically updating the page results, update ads section to show offers and so on by setting up event listeners.</p>

<p>```javascript
  socket.on('adminBroadcast', function(userData){</p>

<pre><code>alert('Howdy there ' + userData.sid + ' ' + userData.socketID + ' ' + userData.page);
</code></pre>

<p>  })
```</p>

<p>There you have an end to end way in which a set of admins can track a set of users on a website and send notifications. This system can be particularly valuable when the user's primary reason for visit accompanies purchasing intent. E-commerce and SAAS platforms have recognized the importance to user segmentation and targeted outreach. This system enables you to minimize the latency of such outreach. On the plus side, you can get to rely on fully open source tools with broad user bases and support.</p>

<p>This particular example used url endpoints as part of the data payload, but you can really strech it to any user events. For example, you can easily track where the user's cursor is and send that information back in real time. One can imagine High Frequency Trading firms using this technique in bots to track real time user behavior, e.g. user's cursor hovering on a buy button for a ticker, as information gathered for its trades. How much you want to track and react to can be an exercise in determining the bounderies of being responsive and creepiness for users.</p>

<p>Props to my friend Shah for working with me on this. If you are doing some level of realtime tracking on your site, I would love to hear about it. Please feel free to send over any other <a href="mailto:avi@aviadas.com">feedback</a> as well.</p>
]]></content>
  </entry>
  
</feed>
