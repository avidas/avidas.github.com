<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | Avi Das]]></title>
  <link href="http://avidas.github.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://avidas.github.com/"/>
  <updated>2019-05-27T16:33:15-04:00</updated>
  <id>http://avidas.github.com/</id>
  <author>
    <name><![CDATA[Avi (Ananya Das)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[React Amsterdam 2019: Takeaways]]></title>
    <link href="http://avidas.github.com/blog/2019/04/14/react-amsterdam-2019-takeaways/"/>
    <updated>2019-04-14T11:16:00-04:00</updated>
    <id>http://avidas.github.com/blog/2019/04/14/react-amsterdam-2019-takeaways</id>
    <content type="html"><![CDATA[<ul>
<li>The case of GraphQL(Peggy Rayzis)

<ul>
<li>Productivity boost across teams</li>
<li>Smaller payloads</li>
<li>Fewer client/server round trips</li>
<li>Preventing over fetching</li>
</ul>
</li>
<li><p>Great Developer Experience (Peggy Rayzis)</p>

<ul>
<li>Unobtrusive, out of the way e.g. Prettier</li>
<li>Predictable and intuitive, e.g. declarative React paradigm</li>
<li>Instant Feedback Loop e.g. VSCode/TS</li>
</ul>
</li>
<li><p>Design Systems (Mark Dalgleish &amp; Andrey Okonetchnikov)</p>

<ul>
<li>Universal Language > Technology</li>
<li>Set of design related rules as system of instructions that can be reused across products</li>
<li>Shared language between designers and developers enforced by tooling</li>
<li>Design powered development tools</li>
<li>Developer workflows as productive as designers</li>
<li>UI components and pattern libraries can provide this intermediate abstraction and be a common language for both designers and developers.</li>
</ul>
</li>
<li><p>Micro Frontends (Max Gallo)</p>

<ul>
<li>Autonomy/Responsibility with Teams Innovation</li>
</ul>
</li>
<li>Better you understand the abstraction, better you are at using it (Kent C Dodds)</li>
<li>Write code that is resilient to future change (Max Stoiber)</li>
<li>Use existing solutions for tech problems if you donâ€™t understand deeply (Bias towards conservative choices)</li>
<li>Be open about roadmap to learn about users priorities</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Realtime Apps with React, Socket.io and Node.js]]></title>
    <link href="http://avidas.github.com/blog/2015/09/06/building-realtime-apps-with-react/"/>
    <updated>2015-09-06T11:16:00-04:00</updated>
    <id>http://avidas.github.com/blog/2015/09/06/building-realtime-apps-with-react</id>
    <content type="html"><![CDATA[<blockquote><p>Update: Udemy has generously granted a free coupon for the readers of this blog for their <a href="https://www.udemy.com/learn-and-understand-reactjs/learn/">React JS and Flux</a> course. Use the code <code>avidasreactjs</code> and the first 50 readers will get free access to the course!</p></blockquote>

<p>The importance of delivering realtime feedback to users is more than ever. Gone are the days when chats or games were the only applications of realtime software. Starting from finance, advertising or education, having a realtime component to your web application will elevate the user experience.</p>

<h3>Socket.io</h3>

<p>From <a href="http://socket.io/">socket.io's homepage</a>, it is a library that enables real-time bidirectional event-based communication. It has two parts, a client side library that runs in the browser and a server side library for node.js. In recent times, this has become the de facto way of doing realtime web applications in the node.js world. Key reasons behind this has been the way it abstracts away the overhead of maintaining multiple protocols, while carrying on similar primitives from <a href="https://nodejs.org/api/stream.html">Node streams</a> and <a href="https://nodejs.org/api/events.html">eventEmitter</a>. Some of its other powerful features include being able to stream Binary data, broadcast to multiple sockets and being able to manage connected client data from the server.</p>

<h3>Architecture</h3>

<p>The WebSocket protocol is a W3C standard that enables interactive communication between browser and server. It functions as an Upgrade request over HTTP 1.1. However, since all legacy browsers and devices do not have support for WebSockets, it's cross-platform abilities get limited.</p>

<p>Socket.io itself is a library to build realtime applications. It will try to upgrade to and use the Websocket protocol if available. Socket.io depends on another libray called Engine.io which exposes a Websocket like API but provides fallbacks to other transport mechanisms such as XHR and JSONP polling. This enables application developers to write realtime codebases that are browser, device and transport implementation independent.</p>

<h3>Getting started with Socket.io</h3>

<p>This tutorial assumes that you have Node.js, npm and Express on your system.</p>

<p>In a directory create two files called index.html and app.js. In your app.js file, add the following</p>

<p>```javascript
var app = require('express')();
var server = require('http').Server(app);
var swig = require('swig');
var path = require('path');</p>

<p>// view engine setup
app.engine('html', swig.renderFile);
app.set('view engine', 'html');</p>

<p>// server and routing
server.listen(8080);
app.get('/', function (req, res) {
  res.render('index');
});
```</p>

<p>We set up the view engine and serve up a basic index page. If this part looks unfamiliar, please check out <a href="http://expressjs.com/guide/routing.html">Express docs</a>. Now add the following in app.js.</p>

<p>```javascript
var io = require('socket.io')(server);
// socket.io demo
io.on('connection', function (socket) {
  socket.emit('server event', { foo: 'bar' });
  socket.on('client event', function (data) {</p>

<pre><code>console.log(data);
</code></pre>

<p>  });
});
```
 We create a new instance of socket.io and pass in the created express server as a parameter. As the server listens, whenever a new client starts a connection, we emit an event called server event and send the payload { foo : 'bar' }. It also listens for 'client event' and logs the payload once it gets the event.</p>

<p>In your index.html file add the following
```html</p>

<script src="http://avidas.github.com/socket.io/socket.io.js"></script>


<script>
  var socket = io();
  socket.on('server event', function (data) {
    console.log(data);
    socket.emit('client event', { socket: 'io' });
  });
</script>


<p>```
It includes the client side socket io library. After instantiating a new connection, it listens for the 'server event' and when that event happens it logs the data and emits 'client event' and sends the payload { socket: 'io'}.</p>

<p>Run node app.js and fire up localhost:8080 in your browser. On the terminal you should see { socket: 'io' } and on the console you should see { foo : 'bar' } printed out. Congrats, you just did your first Socket.io app!</p>

<h3>Useful Socket.io Concepts</h3>

<h5>Message sending/receiving</h5>

<p>Socket.IO allows you to emit and receive custom events. Besides connect, message and disconnect, you can emit custom events and send with associated payload. Emit and Broadcast are ways to send events and on is the event listener.</p>

<h5>Server vs Client API</h5>

<p>There are some common functions between server and client side, but it is worth looking into the docs and understanding what is possible on the server vs client. Generally, the server side has much more features and capabilites and is capable of creating rooms and namespaces but both sides and send and respond to events.</p>

<h5>Rooms and Namespaces</h5>

<p>Socket.io provides built in abstractions to demultiplex the connected clients. Namespaces, identified by a path, can be connected via the following</p>

<p><code>javascript
var socket = io(); //connects to default namespace "/"
var admin = io("/admin"); //connects to the namespace specified by the path "/path"
</code></p>

<p>After a client connects with <code>var socket = io('/admin')</code> , we can send message only to the admin namespace.</p>

<p><code>javascript
admin.emit("admin alert", "website traffic is up!"); //the event will only be sent to the clients who connected to the admin namespace
</code></p>

<p>This enables more role or other criteria based distribution of socket.io events/messages within your application.</p>

<p>Rooms provide a way to further divide up clients within individual namespaces. Clients within a namespace can join and leave a room. By default, a client always is connected to a room idenfied by the sockets id. Hence it is possible to send targeted messages to a connected client via <code>socket.broadcast.to(&lt;SOCKET.ID&gt;).emit('test', 'message')</code>. Rooms could make more sense for particular themes whereas namespaces seem to fit well for user type/responsibilities.</p>

<h3>React and Socket.io</h3>

<p>Now for the exciting part, integrating React.js and Socket.io into an application. React.js is Javascript UI framework from facebook. You can follow some of the <a href="https://facebook.github.io/react/">initial docs</a> to get started with React. This tutorial will not go into great detail into the terminologies of React.js but refer to the official documentation if any of the React syntax looks confusing.</p>

<p>The basic idea of the app is to have an html input and a label. When someone types in something into the input box, it will update the label for anyone else who have an window open except for the person typing.</p>

<h5>Client side code</h5>

<p>Let's start by changing your index.html to the following</p>

<p>```html
&lt;!DOCTYPE html>
<html>
  <head></p>

<pre><code>&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/react/0.13.2/react.min.js"&gt;&lt;/script&gt;
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/react/0.13.2/JSXTransformer.js"&gt;&lt;/script&gt;
&lt;script src="http://avidas.github.com/socket.io/socket.io.js"&gt;&lt;/script&gt;
</code></pre>

<p>  </head>
  <body></p>

<pre><code>&lt;div id="mount-point"&gt;&lt;/div&gt;
&lt;div id="label-mount-point"&gt;&lt;/div&gt;
&lt;script type="text/jsx"&gt;
 /** @jsx React.DOM */
var socket = io();

var Input = React.createClass({
  _notifyServer: function(event){
    socket.emit('client event', { value: event.target.value });
  },
  render: function(){
    return (
      &lt;div className="update-label"&gt;
        &lt;input type="text" placeholder="Enter text" onChange={this._notifyServer}/&gt;
      &lt;/div&gt;
    );
  }
});
var Label = React.createClass({
  _onUpdateLabel: function(data) {
    this.setState(serverValue: data.value);
  },
  getInitialState: function(){
    return { serverValue: '' };
  },
  render: function(){
    return (
      &lt;div class="my-label"&gt;
        &lt;h2&gt;{this.state.serverValue}&lt;/h2&gt;
      &lt;/div&gt;
    )
  }
});
var input = React.render(&lt;Input/&gt;, document.getElementById('mount-point'));
var label = React.render(&lt;Label/&gt;, document.getElementById('label-mount-point'));
socket.on('update label', function (data) {
  label._onUpdateLabel(data);
});
&lt;/script&gt;
</code></pre>

<p>  </body>
</html>
```</p>

<h5>Server side</h5>

<p>The server side of the codebase can mostly stay the same, except we broadcast 'update label' when 'client event' is received.</p>

<p>```javascript
io.on('connection', function (socket) {
  socket.emit('server event', { foo: 'bar' });
  socket.on('client event', function (data) {</p>

<pre><code>socket.broadcast.emit('update label', data);
</code></pre>

<p>  });
});
```</p>

<h5>Explanation</h5>

<p>On the client side, two React components called Input and Label are created and mounted by calling React.render. Input renders an html input box which calls the <em>notifyServer method whenever the someone types into the input field. The </em>notifyServer method then emits socket.io event called 'client event' with the value of the input box.</p>

<p>On the server side, when 'client event' is received with the data, the server calls socket.broadcast.emit and passes the data payload along. This means that all the connected clients except for the socket that generated 'client event' will receive the 'update label' event and the payload. This sends the message to everyone except for the person typing.</p>

<p>Back to the client side, the Label component consists on a div with a h2 element with is set to the serverValue state of the component. <a href="https://facebook.github.io/react/docs/component-specs.html#getinitialstate">getInitialState</a> sets the initial value to be '' so initially the Label is empty. When 'update label' is received, we call the _onUpdateLabel on label, which is an instance of Label. It sets the serverValue state of the Label component to data.value. This invokes the render method of the label component, and it generates a h2 header with the updated value of the serverValue.</p>

<!-- more -->


<h3>Advantages of Socket.io</h3>

<p>Many advantages of socket.io are</p>

<ol>
<li>The simplicity of the integration. Rolling your own realtime library is considerably more difficult due to multi-protocol, browser and device requirements.</li>
<li>Large community of users and support in multiple platforms. It is used from large companies to small startups, meaning developer support is in abundance. Socket.io released native clients on iOS and Android this year, expanding its reach.</li>
<li>It is stable as 1.0.0 has been released in 2014</li>
<li>It is completely free</li>
</ol>


<h3>Disadvantages of Socket.io</h3>

<ol>
<li>Socket.io has its own protocol, and it would not work with any custom Websocket implementation by default. The team has worked on this and support for this is getting better http://socket.io/docs/#using-it-just-as-a-cross-browser-websocket</li>
<li>Scaling across multiple servers when you have too many open connections for a single server is not something that you will get out of the box with socket.io</li>
<li>As with Realtime software, debugging can be complicated and you may need to include Redis or other layers of persistance if you want to gurantee message delivery</li>
</ol>


<p>Realtime on web and mobile is a secret sauce for many websites and apps these days and Socket.io is a dominant technology in that field. There are entire startups which would not be possible without Socket.io and definitely deserves a place in any web/mobile developers skills of expertise.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Evaluating React.js and Flask]]></title>
    <link href="http://avidas.github.com/blog/2015/08/05/evaluating-react-dot-js-and-flask/"/>
    <updated>2015-08-05T10:39:00-04:00</updated>
    <id>http://avidas.github.com/blog/2015/08/05/evaluating-react-dot-js-and-flask</id>
    <content type="html"><![CDATA[<blockquote><p>Update: Udemy has generously granted a free coupon for the readers of this blog for their <a href="https://www.udemy.com/learn-and-understand-reactjs/learn/">React JS and Flux</a> course. Use the code <code>avidasreactjs</code> and the first 50 readers will get free access to the course!</p></blockquote>

<p>As a connoisseur of the web, front-end frameworks have been been a fertile area of late. React.js from Facebook has taken much fanfare, and this post evaluates key ideas on react, and digs into why you could be interested in React. Staying true to single responsibility principle, React is a highly useful tool if you are doing web programming.</p>

<p>In this post, we will dive into building a Frontend using React.js and Backend built using the Python framework Flask. Flask is a minimalistic framework, and excellent when your backend becomes more and more of an API. Moreover, this facilitates the microservices architecture, where the decoupling of your your app into small unit of services can make it more maintainable and scalable.</p>

<p>We will cover some of the key ideas of React and Flask here, but it would be worth referring to the official documentation for <a href="https://facebook.github.io/react/">React</a> and <a href="http://flask.pocoo.org/">Flask</a> for getting started and understanding the philosophies of each framework.</p>

<h3>Key Ideas of React</h3>

<p>The core idea of React is the developers are better of leaving manipulating the DOM to battle tested framework code. Since the DOM has a tree structure, finding elements and manipulating them would need many traversals of a potentially very large tree.  Instead, what you modify is a virtual DOM, and React runs its intelligent diffing algorithm to directly update the DOM.</p>

<h5>React</h5>

<p>React itself is the UI library that will manage all the DOM updates as data changes. It's takes the V of MVC frameworks, hence it can be used with other MVC frameworks such as Angular, Backbone or Meteor. It is quite easy to use React to manage specific areas of your application's UI, rather than the entire app.</p>

<h5>Virtual Dom</h5>

<p>The virtual Dom is an abstraction layer between nodes in the real DOM and the view of the code you are modifying. When React selectively renders subtrees of the nodes in DOM based upon state changes, it achieves the following</p>

<pre><code> 1. Ensures that your DOM is always up to date with current state
 2. Reduces the need to re-render the DOM every time there is change in state
 3. Updating only the individual components on state change ensures high performance
</code></pre>

<h5>JSX</h5>

<p>JSX is a JavaScript syntax extension and it brings in a HTML/XML like familiar syntax for defining a tree structure with attributes. This is the syntax you can use to declare the changes in layout code and React will update the UI. It's a bold approach, since developers are conditioned to keep layout code separate from Javascript. We will explain more React terminology later as we dive into some code.</p>

<h3>Key Ideas of Flask</h3>

<p>Flask is a microframework, which means that it trades a short learning curve for fewer out of the box functionalities, compared to heavier frameworks such as Django or Rails. It gives developers more freedom to use their preferable tools and libraries. However, it does have a list of officially supported <a href="http://flask.pocoo.org/extensions/">extensions</a> which when plugged in provide a wide breath of functionalities for a standard web app. Extensions behave as if they are native flask code.</p>

<p>We strongly recommend that you set up a <a href="http://www.virtualenv.org/">virtualenv</a> for this project, and you may also want to check out <a href="http://virtualenvwrapper.readthedocs.org/">virtualenvwrapper</a> for convenience. This is to provide your app with a sandboxed environment.</p>

<h5>Getting up and running with Flask</h5>

<p>Lets first install Flask</p>

<p>```bash
pip install Flask</p>

<h1>For viewing and reusing app dependencies</h1>

<p>pip freeze > requirements.txt
```
Set up the following directory structure in your app.</p>

<p>```bash</p>

<p>â”œâ”€â”€ README.md
â”œâ”€â”€ app.py
â”œâ”€â”€ requirements.txt
â””â”€â”€ templates</p>

<pre><code>â””â”€â”€ index.html
</code></pre>

<p>```</p>

<p>Modify your app.py code to include the following</p>

<p>```python
from flask import Flask, render_template</p>

<p>app = Flask(<strong>name</strong>)</p>

<p>@app.route("/")</p>

<p>def index():</p>

<pre><code>return render_template('index.html')
</code></pre>

<p>if <strong>name</strong> == "<strong>main</strong>":</p>

<pre><code>app.run()
</code></pre>

<p>```</p>

<p>We start by importing Flask and creating a new instance of a flask application. In flask, app.route is used to describe the behavior when users hit particular endpoints in the application. Here when user hits the index route, we render a template called hello world. By default Flask uses the Jinja2 templating language, but you can use any other templating language. In fact, we will not be covering Jinja2 in this blog post. Finally we tell python to call the run method of the app when invoked as a main function.</p>

<p>Let's populate index.html with the following basic HTML boilerplate</p>

<p>```html</p>

<p>&lt;!DOCTYPE html>
<html lang="en">
<head></p>

<pre><code>&lt;meta charset="UTF-8"&gt;
&lt;title&gt;Flask React Tutorial&lt;/title&gt;
</code></pre>

<p></head>
<body></p>

<pre><code> &lt;div id="mount-point"&gt;
     &lt;p1&gt;Hello world.&lt;/p1&gt;
 &lt;/div&gt;
</code></pre>

<p></body>
</html>
```</p>

<p>Now run the app with</p>

<p><code>bash
python app.py
// * Running on http://127.0.0.0:5000/
// * Restarting with reloader
</code>
By default it runs on port 5000. Navigate to the endpoint and you should see the html page you just created. You are now up and running with Flask!</p>

<h5>Integrate React</h5>

<p>Easiest way to include React would be to just include them from a cdn. Let's update the index.html to include React and and port our existing html to React. index.html will now look like</p>

<p>```html</p>

<p>&lt;!DOCTYPE html>
<html lang="en">
<head></p>

<pre><code>&lt;meta charset="UTF-8"&gt;
&lt;title&gt;Flask React Tutorial&lt;/title&gt;
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/react/0.13.2/react.min.js"&gt;&lt;/script&gt;
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/react/0.13.2/JSXTransformer.js"&gt;
</code></pre>

<p></head>
<body></p>

<pre><code> &lt;div id="mount-point"&gt;&lt;/div&gt;
</code></pre>

<p></body></p>

<p>  <script type="text/jsx"></p>

<pre><code> /*** @jsx React.DOM */
var FirstComponent = React.createClass({
    render: function() {
        return (&lt;p1&gt;Hello world.&lt;/p1&gt;);
    }
});
React.render(&lt;FirstComponent /&gt;, document.getElementById('mount-point') );
 &lt;/script&gt;
</code></pre>

<p></html>
```</p>

<!-- more -->


<p>Let's go over the code. We first include the react and jsx libraries via the script tags and remove the earlier p tags. We set up a jsx script by specifying type="text/jsx". Then we call createClass method of React which creates a React component. React components are reusable units that you can use to compose your UI. The component must have at least the render method, which returns the virtual representation of a native DOM element or another component.
Next we call React.render with the first element and pass it the id of the div element on which we want the result of the render function to be. Run the app again to navigate to the same path to see the app again.</p>

<h5>Data binding with React</h5>

<p>For a more practical example, as well to demonstrate multiple components, let's produce a type along data binding example. You can replace your script tag with the following</p>

<p>```html</p>

<script type="text/jsx">
    /** @jsx React.DOM */
    var Input = React.createClass({
        updateLabel: function(event){
            this.setState({value: event.target.value});
        },
        getInitialState: function(){
            return {
                value: ''
            }
        },
        componentWillMount: function(){
            this.setState({value: this.state.value})
        },
        render: function(){
            return (
                <div className="update-label">
                      <input type="text" placeholder="Enter text" onChange={this.updateLabel}/>
                    <Label value={this.state.value}/>
                </div>
        )
    }
});

var Label = React.createClass({
    render: function(){
        return (
        <div class="my-label">
        <h2>{this.props.value}</h2>
        </div>
        )
    }
});

React.render(<Input/>, document.getElementById('mount-point'));
</script>


<p>```</p>

<p>As before, React.render is called at the very end on a component called Input and it is bound to the element with id mount-point. Inside the Input component a few other lifecycle functions are introduced.</p>

<p>The method getInitialState is called once before the component mounts and  responsible for setting for the initial state of a component.
componentWillMount is called directly before a react component is initially rendered. Inside componentWillMount, we invoke setState.</p>

<p>setState can trigger UI updates from event handlers and server request callbacks. It will always cause a re-render to happen. Once render is called, it returns a div with a input box and a React component called label. We attach the method updateLabel which gets invoked when the text inside the input box changes. It updates this.state.value.</p>

<p>State attributes are mutable within a component and are used to represent the interaction changes changes within a component. On the other hand, props are immutable and used to pass data from a parent component to a child. In this case Label is a child component of Input, and this.state.value for Input is passed to Label, which can access it by this.props.value. Thus Input passes the data entered into the input box to Label and causes it to re-render and display the text.</p>

<p>Fire up the server again and type something into the input box and the content gets updated in the h2 element underneath.</p>

<h5>Why React</h5>

<p>As it turns out, the selling points of React are not super hard to get and clear use cases became obvious.</p>

<ol>
<li><p>React is very efficient in the way it handles DOM updates. It is important however, to isolate that heavy rendering or interactions are the bottlenecks so that you are not optimizing prematurely and likely already have optimized database interactions and network calls.</p></li>
<li><p>SEO management overhead can be less with React compared to Angular/Ember since it can be rendered server side. The benefit comes from not having the overhead of rendering your page server side with something like PhantomJS and serving the HTML.</p></li>
<li><p>Reusable components make the code more reusable and testable, and the short terminology keeps the learning curve managable.</p></li>
<li><p>Since React can be rendered Server Side, you might completely get rid of your server side templating, further reducing the number of tools necessary to run your app.</p></li>
</ol>


<h5>React and Flask</h5>

<p>With their focus on SRP, React and Flask could be dependable and efficient parts of your stack. This is specially handy if you want to leverage the Numpy/Scipy stack for doing data analysis in near realtime and serve up a frontend with heavy user interaction. In a later post, we will look at exploring interactive applications and introduce Socket.io.</p>
]]></content>
  </entry>
  
</feed>
