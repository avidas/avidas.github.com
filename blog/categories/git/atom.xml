<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | Avi Das]]></title>
  <link href="http://avidas.github.com/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://avidas.github.com/"/>
  <updated>2020-05-10T15:02:09-04:00</updated>
  <id>http://avidas.github.com/</id>
  <author>
    <name><![CDATA[Avi (Ananya Das)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bug hunting with git bisect]]></title>
    <link href="http://avidas.github.com/blog/2014/08/30/bug-hunting-with-git-bisect/"/>
    <updated>2014-08-30T12:55:00-04:00</updated>
    <id>http://avidas.github.com/blog/2014/08/30/bug-hunting-with-git-bisect</id>
    <content type="html"><![CDATA[<p>With large projects with Git, feature development tends to happen often in separate branches before they are ready for merge. However, once the merge happens and tests break, it's often challenging to figure out the commit at which the bug got introduced. Git bisect is an excellent tool to triage that commit. It does so in a binary search like fashion, marking good and bad commits and reducing problem space of commits by half every time.</p>

<p>However, this process can be quite manual so git bisect has a run command. This allows you to set a testing scipt and based on the output of the testing script, it automatically finds the middle commits and continues searching till it finds the breaking commit.</p>

<p>Another neat feature is its ability to log out the output, record and rerun the bisect for further debugging. The git-scm book has some excellent documentation for the <a href="http://git-scm.com/docs/git-bisect">complete api</a> and <a href="http://git-scm.com/docs/git-bisect-lk2009.html">technical details</a>.</p>

<p>There are still a few manual steps, as you would want to stash for saving and recovering state of uncommitted work, get to HEAD and view the log available for record and replay.</p>

<p>For reusability, I wrote the following script to make git bisecting and setup into a handy bash function.</p>

<p>```bash</p>

<h1>Stash current work and and git bisect with given good and</h1>

<h1>bad commit ids, running given script that exits with 0 on failure</h1>

<h1>and positive number on success</h1>

<p>gbisect() {</p>

<pre><code>if [ "$#" -ne 1 ]; then
    echo "gbisect good-commit-id bad-commit-id script &lt;arguments&gt;"
else
    git stash # stash current state
    git checkout HEAD
    git bisect start # initialize git bisect
    git bisect good $1
    shift
    git bisect bad $1
    shift
    git bisect run "$@" # # git bisect 

    git bisect log
    git bisect reset

    git stash list
    git stash apply
fi
</code></pre>

<p>}
```</p>

<p>If you are using mocha as a test runner, you could use the script as following</p>

<p><code>bash
gbisect 23df33 56dg23 mocha -t 15000
</code></p>

<p>Git is like an iceberg, in a good way. Generally instead of perusing heavy books on something, I like learning as I run into challenges. Once something clicks though, it is great as it has a N times effect into your workflow if you are using git for work and personal projects.</p>
]]></content>
  </entry>
  
</feed>
