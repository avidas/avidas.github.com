<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Software | Avi Das]]></title>
  <link href="http://avidas.github.com/blog/categories/software/atom.xml" rel="self"/>
  <link href="http://avidas.github.com/"/>
  <updated>2019-02-18T09:29:11-05:00</updated>
  <id>http://avidas.github.com/</id>
  <author>
    <name><![CDATA[Avi (Ananya Das)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Web Payments by First Principles: Testing]]></title>
    <link href="http://avidas.github.com/blog/2017/05/19/web-payments-by-first-principles-testing/"/>
    <updated>2017-05-19T16:21:00-04:00</updated>
    <id>http://avidas.github.com/blog/2017/05/19/web-payments-by-first-principles-testing</id>
    <content type="html"><![CDATA[<p>In recent years, payment API providers have made integrating payments much easier than it used to be. Instead of dealing with banks and exchanges, ecommerce apps can integrate with payment gateways that will allow accepting any form of credit cards, and most payment methods such as Apple Pay and PayPal. Large pdfs with instructions manuals are replaced by intelligent documentation sites with walkthroughs and tutorials. Despite that, it is not uncommon to hear developers referring payments as their least favorite part of the development process. Payments integrations are often seen as a necessary evil, to be done once, and hopefully be forgotten thereafter. Often the reasoning is that investing in better payments integration is often not a profit center for companies.</p>

<p>I have worked the last few years in the online payments industry, building APIS, sdks and reliability tools. While payments integration has gotten easier, developers still do make mistakes which are easily avoidable. Here are some of the best practices I would recommend for testing payments in your applications.</p>

<ol>
<li><p><strong>Isolate interation between application code and payment gateway in a package</strong>: Once an app grows to a certain size, it may have different ways of interacting with payments gateways. You may be accepting recurring payments and accepting webhooks from the payments provider, just in time checkout or interact with point of sales systems. Having your own package that abstracts out interaction with the payments APIs can help centralize all outgoing requests back and forth with the payments API. You can add your own logging and monitoring, stub out the interaction with payments API to have faster unit tests and centralize knowledge about how you serialize and deserialize messages from and to your payments provider.</p></li>
<li><p><strong>Sandbox Testing</strong>: Most payment API/gateways expose a sandbox environments where you can test out a real integration with the API without moving any money. Ideally your integration tests running continously in Jenkins/Travis/Circle CI should be hitting those endpoints.</p></li>
<li><p><strong>Monitoring</strong>: You should monitor your sandbox integration as well as your live system. What does the graph of 200s vs 400s HTTP response codes from the payments API look like? Are you getting unexpected 400s? How about 500s? What does the response times look like?</p></li>
<li><p><strong>Automated QA</strong>: To avoid putting undue stress on your computation and database resources, background tasks are common strategies to do break down calculations for common payments needs such as reporting and analytics. When calculations are done in partial chunks, automated jobs that test whether those calculations have been done properly can reduce a lot of load for your support and developers when something goes wrong midway between a job, or failure.</p></li>
<li><p><strong>Negative/Failure Testing</strong>: Special card numbers provided by payments providers can help you recreate payment declines due to potential denial from processors for reasons such as not enough funds in account. You may also be able to test for rejections due to fraud and compliance. This helps lower the range of potential unknown errors your site may run into, especially when expanding to new markets or accepting more payment methods.</p></li>
<li><p><strong>Live testing</strong>: Live testing against payment providers is often tricky, and can led to accounts getting shut down if there is undue load on the API. Despite that, some testing in live is absolutely necessary before you can be confident that on release day, your integration is working as expected.</p></li>
<li><p><strong>Test for absence of sentive information</strong>: Storing user information such as credit card number or passwords is a very common way of violation of PCI compliance. Regex patterns can be used to make sure that neither your logs nor your database is storing sensitive information.</p></li>
</ol>


<p>I intend to write more posts in this series, covering topics such as considerations before and after going live with payments, when scaling up and so on. If you liked this post, please share or comment.</p>

<p>If you have feedback on this blog post or integrating payments, please <a href="mailto:avi@aviadas.com">feel free to reach out!</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What makes a great programming tutorial?]]></title>
    <link href="http://avidas.github.com/blog/2016/04/18/what-makes-a-great-online-tutorial/"/>
    <updated>2016-04-18T05:36:00-04:00</updated>
    <id>http://avidas.github.com/blog/2016/04/18/what-makes-a-great-online-tutorial</id>
    <content type="html"><![CDATA[<p>The Internet started as a publishing medium. It excels at enabling people to share their unique gifts. An amazing amount of content gets put out on the web everyday, far beyond someone can read in a lifetime. Massive amount of information also means information overload.</p>

<p>In software, it is common to use web tutorials to supplement one's learning of a particular material. Following guidelines of someone who has already done it can really fast track development. Tutorials appear in various forms in the web. Some of the common formats are long form blogposts, videos and series of email newsletters. Some enjoy the personal touch that videos can offer; others enjoy being able to quickly skim a blogpost.</p>

<p>When you want to put your hard earned knowledge and valuable time into writing a tutorial, there are questions worth thinking about. Does the tutorial cater to its intended audience? Will it reach them? Can someone quickly skim the content and still get value? Is there a way to measure the effectiveness of online tutorials?</p>

<p><img class="left" src="https://files.slack.com/files-pri/T025F19MZ-F1ASWBLV8/pasted_image_at_2016_05_22_04_58_pm.png" width="800" height="800" title="Survey Questions" alt="Survey Questions"></p>

<p>To look for answers, I asked a carefully selected group of 150 people about their preference of tutorials. The focus was on software engineers/designers/entrepreneurs due to my familiarity and experience with the field. What emerged from their responses gives a blueprint for creating great online resources.</p>

<ol>
<li><p><strong>Real time feedback</strong>: If exercises or examples accompany a tutorial, multiple survey responders emphasized the need to check the user's responses and provide interactive feedback to the user to guide them to the solution. Good examples are checkpoint multiple choice questions during Coursera/Udacity courses that you must complete to move forward with the course.</p></li>
<li><p><strong>Follow up</strong>: Several responders emphasized the need to provide contact information or other means to reach out to the author once they went through a tutorial. Providing a comments section or your email/twitter handle are great mediums for a reader to follow up.</p></li>
<li><p><strong>Address a concrete problem</strong>: Staying focused of a specific problem gives a tutorial depth. A differentiator can be to classify for the user whether the focus is academic and structured vs. a blogpost focused on solving a particular problem right now.</p></li>
<li><p><strong>Working examples</strong>: Interactive, working examples close to the content that builds on top of each other makes following along simpler. <a href="https://www.railstutorial.org/">Michael Hartl's Ruby on Rails tutorials</a> came up as an example of detailed, comprehensive tutorials.</p></li>
<li><p><strong>Advanced user tutorials</strong>: Several user's pointed out the need for tutorials that addresses advanced content. Making expectations clear about experience levels of intended audiences can be a huge positive for tutorials. <a href="https://www.raywenderlich.com/video-tutorials">Ray Wenderlich's iOS tutorials</a> are good examples of the detail and level of research and understanding that can happen before putting out content on the web.</p></li>
</ol>


<!-- more -->


<ol>
<li><p><strong>Copyright</strong>: Sometimes an afterthought, it may be worth pointing out what license the content is released under. This can give the readerâ€™s clarity on how to attribute the source when they use that content in production. Github makes this really easy with license options provided  during repository creation.</p></li>
<li><p><strong>Offer tangible short-term benefits</strong>: While this certainly applies more to blogposts rather than courses, focusing on offering user's value short, medium and long term can improve the message of a tutorial. Moreover, an user may be more inclined to follow through the entire content of a tutorial if they are get that value at different stages of the tutorial.</p></li>
<li><p><strong>Timeliness</strong>: This could be hard to measure, but popularity of tutorials can be attributed to how current and relevant they are. As of the time of writing this blogpost, April 2016, there are lot of people looking to get into VR/AR, chatbots, AI and so on. Accounting for recency can certainly increase the reader counts of your posts.</p></li>
<li><p><strong>Continuity</strong>: It became clear through the responses that while people looked for tutorials to solve a particular problem, they return because they are looking for a subject matter expert. Producing a series of tutorials taking on different aspects of a topic can help with retention.</p></li>
<li><p><strong>Discoverability</strong>: This can go in the realms of SEO, but lot of responders responded to their favorite source of online tutorials with well-known sources. Coursera/Udemy/Khan Academy/YouTube and Google were all common ways people went around in finding online tutorials. If you do not want to solve distribution for the content you create, writing for more known blogs/sites can be a way to reach larger audiences.</p></li>
<li><p><strong>Formatting</strong>: A big part of the user experience, proofreading cannot be left for the last. In the tech space, prominent writers such as Paul Graham always attribute at the end of the blogpost all those who have helped proofread the content. Just passing it around to a few people before publication and basic spell checking/grammar checking can improve the user experience for tutorials.</p></li>
</ol>


<p>There are definitely caveats to this survey. As the person compiling this survey, it is at least slightly influenced by my biases. My target group is highly technically literate, so there is a bias towards modern tools. Perhaps it is worth taking into account the intent of writing tutorials, be it teaching, lead generation or growing a business.</p>

<p>Like most studies, this too should be taken with a grain of salt and in no way is sure way to produce great tutorials. Someone's genuine passion, interest and the willingness to learn and teach find their ways to shine through content. However, just as the <a href="http://www.joelonsoftware.com/articles/fog0000000043.html">Joel Test for Software Development</a> companies is often a good checklist for expected standards of software companies, being aware of the readerâ€™s needs and voice can lead to sharper, more helpful tutorials.</p>

<p>Research for this post was done by using Dripper, a twitter direct message automation tool that I helped build. Feel free to <a href="mailto:avi@aviadas.com">reach out</a> if you want to know more about the software!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Evaluating React.js and Flask]]></title>
    <link href="http://avidas.github.com/blog/2015/08/05/evaluating-react-dot-js-and-flask/"/>
    <updated>2015-08-05T10:39:00-04:00</updated>
    <id>http://avidas.github.com/blog/2015/08/05/evaluating-react-dot-js-and-flask</id>
    <content type="html"><![CDATA[<blockquote><p>Update: Udemy has generously granted a free coupon for the readers of this blog for their <a href="https://www.udemy.com/learn-and-understand-reactjs/learn/">React JS and Flux</a> course. Use the code <code>avidasreactjs</code> and the first 50 readers will get free access to the course!</p></blockquote>

<p>As a connoisseur of the web, front-end frameworks have been been a fertile area of late. React.js from Facebook has taken much fanfare, and this post evaluates key ideas on react, and digs into why you could be interested in React. Staying true to single responsibility principle, React is a highly useful tool if you are doing web programming.</p>

<p>In this post, we will dive into building a Frontend using React.js and Backend built using the Python framework Flask. Flask is a minimalistic framework, and excellent when your backend becomes more and more of an API. Moreover, this facilitates the microservices architecture, where the decoupling of your your app into small unit of services can make it more maintainable and scalable.</p>

<p>We will cover some of the key ideas of React and Flask here, but it would be worth referring to the official documentation for <a href="https://facebook.github.io/react/">React</a> and <a href="http://flask.pocoo.org/">Flask</a> for getting started and understanding the philosophies of each framework.</p>

<h3>Key Ideas of React</h3>

<p>The core idea of React is the developers are better of leaving manipulating the DOM to battle tested framework code. Since the DOM has a tree structure, finding elements and manipulating them would need many traversals of a potentially very large tree.  Instead, what you modify is a virtual DOM, and React runs its intelligent diffing algorithm to directly update the DOM.</p>

<h5>React</h5>

<p>React itself is the UI library that will manage all the DOM updates as data changes. It's takes the V of MVC frameworks, hence it can be used with other MVC frameworks such as Angular, Backbone or Meteor. It is quite easy to use React to manage specific areas of your application's UI, rather than the entire app.</p>

<h5>Virtual Dom</h5>

<p>The virtual Dom is an abstraction layer between nodes in the real DOM and the view of the code you are modifying. When React selectively renders subtrees of the nodes in DOM based upon state changes, it achieves the following</p>

<pre><code> 1. Ensures that your DOM is always up to date with current state
 2. Reduces the need to re-render the DOM every time there is change in state
 3. Updating only the individual components on state change ensures high performance
</code></pre>

<h5>JSX</h5>

<p>JSX is a JavaScript syntax extension and it brings in a HTML/XML like familiar syntax for defining a tree structure with attributes. This is the syntax you can use to declare the changes in layout code and React will update the UI. It's a bold approach, since developers are conditioned to keep layout code separate from Javascript. We will explain more React terminology later as we dive into some code.</p>

<h3>Key Ideas of Flask</h3>

<p>Flask is a microframework, which means that it trades a short learning curve for fewer out of the box functionalities, compared to heavier frameworks such as Django or Rails. It gives developers more freedom to use their preferable tools and libraries. However, it does have a list of officially supported <a href="http://flask.pocoo.org/extensions/">extensions</a> which when plugged in provide a wide breath of functionalities for a standard web app. Extensions behave as if they are native flask code.</p>

<p>We strongly recommend that you set up a <a href="http://www.virtualenv.org/">virtualenv</a> for this project, and you may also want to check out <a href="http://virtualenvwrapper.readthedocs.org/">virtualenvwrapper</a> for convenience. This is to provide your app with a sandboxed environment.</p>

<h5>Getting up and running with Flask</h5>

<p>Lets first install Flask</p>

<p>```bash
pip install Flask</p>

<h1>For viewing and reusing app dependencies</h1>

<p>pip freeze > requirements.txt
```
Set up the following directory structure in your app.</p>

<p>```bash</p>

<p>â”œâ”€â”€ README.md
â”œâ”€â”€ app.py
â”œâ”€â”€ requirements.txt
â””â”€â”€ templates</p>

<pre><code>â””â”€â”€ index.html
</code></pre>

<p>```</p>

<p>Modify your app.py code to include the following</p>

<p>```python
from flask import Flask, render_template</p>

<p>app = Flask(<strong>name</strong>)</p>

<p>@app.route("/")</p>

<p>def index():</p>

<pre><code>return render_template('index.html')
</code></pre>

<p>if <strong>name</strong> == "<strong>main</strong>":</p>

<pre><code>app.run()
</code></pre>

<p>```</p>

<p>We start by importing Flask and creating a new instance of a flask application. In flask, app.route is used to describe the behavior when users hit particular endpoints in the application. Here when user hits the index route, we render a template called hello world. By default Flask uses the Jinja2 templating language, but you can use any other templating language. In fact, we will not be covering Jinja2 in this blog post. Finally we tell python to call the run method of the app when invoked as a main function.</p>

<p>Let's populate index.html with the following basic HTML boilerplate</p>

<p>```html</p>

<p>&lt;!DOCTYPE html>
<html lang="en">
<head></p>

<pre><code>&lt;meta charset="UTF-8"&gt;
&lt;title&gt;Flask React Tutorial&lt;/title&gt;
</code></pre>

<p></head>
<body></p>

<pre><code> &lt;div id="mount-point"&gt;
     &lt;p1&gt;Hello world.&lt;/p1&gt;
 &lt;/div&gt;
</code></pre>

<p></body>
</html>
```</p>

<p>Now run the app with</p>

<p><code>bash
python app.py
// * Running on http://127.0.0.0:5000/
// * Restarting with reloader
</code>
By default it runs on port 5000. Navigate to the endpoint and you should see the html page you just created. You are now up and running with Flask!</p>

<h5>Integrate React</h5>

<p>Easiest way to include React would be to just include them from a cdn. Let's update the index.html to include React and and port our existing html to React. index.html will now look like</p>

<p>```html</p>

<p>&lt;!DOCTYPE html>
<html lang="en">
<head></p>

<pre><code>&lt;meta charset="UTF-8"&gt;
&lt;title&gt;Flask React Tutorial&lt;/title&gt;
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/react/0.13.2/react.min.js"&gt;&lt;/script&gt;
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/react/0.13.2/JSXTransformer.js"&gt;
</code></pre>

<p></head>
<body></p>

<pre><code> &lt;div id="mount-point"&gt;&lt;/div&gt;
</code></pre>

<p></body></p>

<p>  <script type="text/jsx"></p>

<pre><code> /*** @jsx React.DOM */
var FirstComponent = React.createClass({
    render: function() {
        return (&lt;p1&gt;Hello world.&lt;/p1&gt;);
    }
});
React.render(&lt;FirstComponent /&gt;, document.getElementById('mount-point') );
 &lt;/script&gt;
</code></pre>

<p></html>
```</p>

<!-- more -->


<p>Let's go over the code. We first include the react and jsx libraries via the script tags and remove the earlier p tags. We set up a jsx script by specifying type="text/jsx". Then we call createClass method of React which creates a React component. React components are reusable units that you can use to compose your UI. The component must have at least the render method, which returns the virtual representation of a native DOM element or another component.
Next we call React.render with the first element and pass it the id of the div element on which we want the result of the render function to be. Run the app again to navigate to the same path to see the app again.</p>

<h5>Data binding with React</h5>

<p>For a more practical example, as well to demonstrate multiple components, let's produce a type along data binding example. You can replace your script tag with the following</p>

<p>```html</p>

<script type="text/jsx">
    /** @jsx React.DOM */
    var Input = React.createClass({
        updateLabel: function(event){
            this.setState({value: event.target.value});
        },
        getInitialState: function(){
            return {
                value: ''
            }
        },
        componentWillMount: function(){
            this.setState({value: this.state.value})
        },
        render: function(){
            return (
                <div className="update-label">
                      <input type="text" placeholder="Enter text" onChange={this.updateLabel}/>
                    <Label value={this.state.value}/>
                </div>
        )
    }
});

var Label = React.createClass({
    render: function(){
        return (
        <div class="my-label">
        <h2>{this.props.value}</h2>
        </div>
        )
    }
});

React.render(<Input/>, document.getElementById('mount-point'));
</script>


<p>```</p>

<p>As before, React.render is called at the very end on a component called Input and it is bound to the element with id mount-point. Inside the Input component a few other lifecycle functions are introduced.</p>

<p>The method getInitialState is called once before the component mounts and  responsible for setting for the initial state of a component.
componentWillMount is called directly before a react component is initially rendered. Inside componentWillMount, we invoke setState.</p>

<p>setState can trigger UI updates from event handlers and server request callbacks. It will always cause a re-render to happen. Once render is called, it returns a div with a input box and a React component called label. We attach the method updateLabel which gets invoked when the text inside the input box changes. It updates this.state.value.</p>

<p>State attributes are mutable within a component and are used to represent the interaction changes changes within a component. On the other hand, props are immutable and used to pass data from a parent component to a child. In this case Label is a child component of Input, and this.state.value for Input is passed to Label, which can access it by this.props.value. Thus Input passes the data entered into the input box to Label and causes it to re-render and display the text.</p>

<p>Fire up the server again and type something into the input box and the content gets updated in the h2 element underneath.</p>

<h5>Why React</h5>

<p>As it turns out, the selling points of React are not super hard to get and clear use cases became obvious.</p>

<ol>
<li><p>React is very efficient in the way it handles DOM updates. It is important however, to isolate that heavy rendering or interactions are the bottlenecks so that you are not optimizing prematurely and likely already have optimized database interactions and network calls.</p></li>
<li><p>SEO management overhead can be less with React compared to Angular/Ember since it can be rendered server side. The benefit comes from not having the overhead of rendering your page server side with something like PhantomJS and serving the HTML.</p></li>
<li><p>Reusable components make the code more reusable and testable, and the short terminology keeps the learning curve managable.</p></li>
<li><p>Since React can be rendered Server Side, you might completely get rid of your server side templating, further reducing the number of tools necessary to run your app.</p></li>
</ol>


<h5>React and Flask</h5>

<p>With their focus on SRP, React and Flask could be dependable and efficient parts of your stack. This is specially handy if you want to leverage the Numpy/Scipy stack for doing data analysis in near realtime and serve up a frontend with heavy user interaction. In a later post, we will look at exploring interactive applications and introduce Socket.io.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nodeconf 2015: Unconf with the right intentions]]></title>
    <link href="http://avidas.github.com/blog/2015/06/14/nodeconf-unconf-with-the-right-intentions/"/>
    <updated>2015-06-14T16:28:00-04:00</updated>
    <id>http://avidas.github.com/blog/2015/06/14/nodeconf-unconf-with-the-right-intentions</id>
    <content type="html"><![CDATA[<p>Conferences can be a great way to get the creative juices flowing, meet people in the community and share stories and problems. They offer great opportunities to learn from core developers building the frameworks that your software depends on.</p>

<p>Nodeconf managed to achieve all this, in the rather unusual form of an unconference. An unconference meant that the structure and events/presentations and talks at the conference were left to be decided by the community rather than a committee. That does make Nodeconf a conference not for everyone. Understanding the format and structure of Nodeconf is important before you make the hike to Walnut Creek Ranch next year.</p>

<p>I thought to distill down the reasons why you might or might not be interested in attending Nodeconf as well as get the most out of it. You might be interested in Nodeconf if you</p>

<ol>
<li><p><strong>Build for the web</strong>: For a lot of attendees, Nodeconf would feel like living in the future as a lot of attendees are very involved in making the decisions and tradeoff that would shape the future of the web. Specially discussions around packaging and parceling front end assets in npm (Modular UI) was really interesting as was Isomorphic JS, which covered the challenges involved in writing identical client and server side code. The JavaScript landscape is a fast evolving one and Nodeconf offers fantastic perspective on how the decision making can work.</p></li>
<li><p><strong>Publish on npm/github</strong>: As someone who maintains projects on npm and github, the discussions around distributing node modules were very insightful. Issues such as broadening adoption, getting contributors for github modules and standards for publishing on npm came up and maintainers of hugely popular modules shared their experiences. Picking a good module scope, having really good examples for beginners to start with and publishing with concise yet searchable package descriptions were all emphasized.</p></li>
</ol>


<!-- more -->


<ol>
<li><p><strong>Foster community growth</strong>: The node community is certainly dealing with the growing pains that comes with success. Having a well defined process for integrating new members is really important for large codebases. Broadening mentorship was considered as a possibility for guiding new members through the steep learning curve.</p></li>
<li><p><strong>Want to get a deeper understanding of Node Core and APIs</strong>: There was unparalleled opportunity to discuss Node core/API and critical libraries such as libuv with the core developers. This was also true for external node libraries, and it can be certainly valuable to take a set of well defined problems that you have on your Node codebases as you are bound to make progress in such an environment.</p></li>
</ol>


<p>You might not be interested in Nodeconf if</p>

<ol>
<li><p><strong>You expect Nodeconf to be a 3 day training session on Node</strong>: While Nodeconf was full of illuminating discussions and presentations, it was certainly not a series of tutorials on Node.</p></li>
<li><p><strong>You expect a traditional conference structure</strong>: It did not take place on a hotel, rather a ranch and certainly does not have some of the glamour associated with WWDC or Google I/O.</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Realtime user monitoring and targeting platform with Node, Express and Socket.io]]></title>
    <link href="http://avidas.github.com/blog/2015/06/06/building-realtime-user-monitoring-and-targeting-platform-with-node/"/>
    <updated>2015-06-06T15:31:00-04:00</updated>
    <id>http://avidas.github.com/blog/2015/06/06/building-realtime-user-monitoring-and-targeting-platform-with-node</id>
    <content type="html"><![CDATA[<p>Being able to target users and send targeted notifications can be key to turn visitors into conversions and tighten your funnel. Offerings such as mailchimp and mixpanel offer ways to reach out to users but in most of those cases you only get to do them in post processing. However, there are situations when it would be really powerful is to be able to track users as they are navigating your website and send targeted notifications to them.</p>

<h3>Use Cases</h3>

<p>Imagine that a buyer is looking for cars to buy and is interested in vehicles of a particular model and brand. It is very likely that he/she will visit several sites to compare prices. If there are a few results the buyer has looked at already, there may be an item which would fit the profile of this user. If you are able to prompt and reach out as the user is browsing through several results, it could make the difference between a sale and user buying from a different site. This is particularly useful for high price, high options scenerios e.g. Real Estate/Car/Electronics purchases. For use cases where the price is low or the options are fewer, e.g. a SAAS offering with a 3 tiers, this level of fine grained tracking may not be necessary. However, if you have a fledgling SAAS startup, you may want to do this in the spirit of <a href="http://paulgraham.com/ds.html">doing things that don't scale</a>.</p>

<h3>Prerequisites</h3>

<p>This article assumes that you have <a href="https://nodejs.org/">node and npm</a> installed on your system. It would be also be useful to get familiar with <a href="http://expressjs.com/">Express.js</a>, the de facto web framework on top of Node.js. <a href="http://socket.io/">Socket.io</a> is a Node.js module that abstracts WebSocket, JSON Polling and other protocols to enable simultaneous bi directional communication between connected parties. This article makes heavy use of Socket.io terminology, so it would be good to be familiar with sending and receiving events, broadcasts, namespaces and rooms.</p>

<h3>Install and run</h3>

<p>Start by git cloning the repo, install dependencies and run the app.</p>

<p><code>bash
git clone git@github.com:avidas/socketio-monitoring.git
cd socketio-monitoring
npm install
npm start
</code></p>

<p>By default this will start the server at port 8080. navigate to localhost:8080/admin on a browser e.g Chrome. Now, on a different browser, e.g. Firefox, navigate to localhost:8080 and browse around. You will see that the admin page gets updated with the url endpoints as you navigate your way through the website in firefox. You can even send an alert to the user on Firefox by pressing the send offer button on Chrome!</p>

<h3>Walkthrough</h3>

<p>Let's get into how this works. When an admin visits localhost:8080/admin, she joins a Socket.io namespace called adminchannel.</p>

<p><code>javascript
var adminchannel = io.of('/adminchannel');
</code></p>

<p>When a new user visits a page, we get the <a href="https://github.com/expressjs/session#reqsession">express sessionID</a> of the user by calling req.sessionID and pass it to the templating engine for rendering. The session id ensures that we can identify a user across pages and browser tabs.</p>

<p><code>javascript
res.render('index', {a:req.sessionID});
</code></p>

<p>The template sets the value of sessionID as a hidden input field on the page, with the id "user_session_id".</p>

<p>```html
<body>
<input type="hidden" id="user_session_id" value="<%= a %>" />
  <div id="device" style="font-size: 45px;">2015 Tesla Cars</div></p>

<pre><code>&lt;a href="http://avidas.github.com/about"&gt;About&lt;/a&gt;
</code></pre>

<p>  <br />
  <a href="http://avidas.github.com/">Home</a>
</body>
```
After the page has loaded, it will emit a pageChange socket.io event. Accompanying the event is the url endpoint for the current page and sessionID.</p>

<p>```javascript
  var userSID = document.getElementById('user_session_id').value;
  var socket = io();</p>

<p>  var userData = {</p>

<pre><code>page: currentURL,
sid: userSID
</code></pre>

<p>  }
  socket.emit('pageChange', userData);
```
On server side, when pageChange is received, a Socket.io event called alertAdmin is sent to the adminchannel namespace. This ensures that only the admins are alerted that user with particular session id and particular socket id has navigated to a different page. Since anyone with access to /admin endpoint will join the adminchannel namespace, this can easily scale to multiple admins.</p>

<p>```javascript
  socket.on('pageChange', function(userData){</p>

<pre><code>userData.socketID = socket.id;
userData.clientIDs = clientIDs;
console.log('user with sid ' + userData.sid + ' and session id ' + userData.socketID + ' changed page ' + userData.page);
adminchannel.emit('alertAdmin', userData);
</code></pre>

<p>  });
```</p>

<p>When altertAdmin is received on the client side, the UI dashboard is updated so that the admins have a realtime dashboard of users navigating the site. This is done via Jquery which appends each new page change to a html list as users navigate through the site.</p>

<p>```javascript
  adminsocket.on('alertAdmin', function(userData){</p>

<pre><code>var panel = document.getElementById('panel');
var val = " User with session id " + userData.sid + " and with socket id " + userData.socketID + " has navigated to " + userData.page;
userDataGlob = userData;
var list = $('&lt;ul/&gt;').appendTo('#panel');
//Dynamic display of users interacting on your website
$("#panel ul").append('&lt;li&gt; ' + val + ' &lt;button type="button" class="offerClass" id="' + userData.socketID + '"&gt;Send Offer&lt;/button&gt;&lt;/li&gt;');
</code></pre>

<p>  });
<code>
Now, the admin may choose to send certain notifications to the particular user. When the admin clicks on the "Send Offer" button, a socket.io event called adminMessage is sent to the general namespace on the server with the user specific data.
</code>javascript
  //Allow admin to send adminMessage
  $('body').on('click', '.offerClass', function () {</p>

<pre><code>socket.emit('adminMessage', userDataGlob);
</code></pre>

<p>  });
```
When adminMessage is received on the server side, we broacast to the specific user the message. Since every user always joins into a room identified by their socketID, we can send a notification only to that user by using socket.broadcast.to(userData.socketID) and we send an event called adminBroadcast with the data.</p>

<p>Here, you could have chosen to broadcast a message to all the users, or to a particular room, which subsets of users could have joined. Thus, you can fine tune how you want to reach out to users as well.</p>

<p>```javascript
  socket.on('adminMessage', function(userData) {</p>

<pre><code>socket.broadcast.to(userData.socketID).emit('adminBroadcast', userData);
</code></pre>

<p>  });
```</p>

<p>Finally on the client side of the user when adminBroadcast is received, the user is alterted with a notification. However, you can easily use it for more complex use cases such as dynamically updating the page results, update ads section to show offers and so on by setting up event listeners.</p>

<p>```javascript
  socket.on('adminBroadcast', function(userData){</p>

<pre><code>alert('Howdy there ' + userData.sid + ' ' + userData.socketID + ' ' + userData.page);
</code></pre>

<p>  })
```</p>

<p>There you have an end to end way in which a set of admins can track a set of users on a website and send notifications. This system can be particularly valuable when the user's primary reason for visit accompanies purchasing intent. E-commerce and SAAS platforms have recognized the importance to user segmentation and targeted outreach. This system enables you to minimize the latency of such outreach. On the plus side, you can get to rely on fully open source tools with broad user bases and support.</p>

<p>This particular example used url endpoints as part of the data payload, but you can really strech it to any user events. For example, you can easily track where the user's cursor is and send that information back in real time. One can imagine High Frequency Trading firms using this technique in bots to track real time user behavior, e.g. user's cursor hovering on a buy button for a ticker, as information gathered for its trades. How much you want to track and react to can be an exercise in determining the bounderies of being responsive and creepiness for users.</p>

<p>Props to my friend Shah for working with me on this. If you are doing some level of realtime tracking on your site, I would love to hear about it. Please feel free to send over any other <a href="mailto:avi@aviadas.com">feedback</a> as well.</p>
]]></content>
  </entry>
  
</feed>
