<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Avi Das]]></title>
  <link href="http://avidas.github.com/atom.xml" rel="self"/>
  <link href="http://avidas.github.com/"/>
  <updated>2014-06-05T22:52:56-05:00</updated>
  <id>http://avidas.github.com/</id>
  <author>
    <name><![CDATA[Avi (Ananya Das)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Best Chrome Productivity Extensions]]></title>
    <link href="http://avidas.github.com/blog/2014/06/01/best-chrome-productivity-extensions/"/>
    <updated>2014-06-01T16:40:00-05:00</updated>
    <id>http://avidas.github.com/blog/2014/06/01/best-chrome-productivity-extensions</id>
    <content type="html"><![CDATA[<p>How much time during the day do you spend on an internet browser? As a software engineer, my answer is a scary amount of time. Something I have personally struggled with is avoiding distracting sites on the internet. There is too much good content on the internet that dries up my rather finite amount of attention.</p>

<p>Chrome has been my weapon of choice for browsing the web for a while now. Intuitive, clean and fast, Chrome&#8217;s ascent has been amazing to see over the past few years. Extensions on chrome allow addition of new features on Chrome made by third party developers. Lately, and there are a few extensions I simply cannot do without. When you need to buckle up and get something done, these extensions will help you get there.</p>

<ol>
<li><p><a href="http://getpocket.com">Pocket</a>:
There are enough interesting things to read on the internet for many lifetimes. Just like youtube&#8217;s watch it later does for videos, Pocket lets me save articles for future reading. With clients available for iOS and Android, articles saved can be accessed anywhere. At any time on social websites, be it facebook, quora or hacker news, there is a lot I would like to read. Pocket gives me the convenience to customize articles from the internet into my customized feed or magazine via Flipboard integration.</p></li>
<li><p><a href="https://chrome.google.com/webstore/detail/session-buddy/edacconmaakjimmfgnblocblbcdcpbko?hl=en">Session Buddy</a> :
If you are like me, you context switch a lot between projects during a day. Chrome deals with tabs beautifully, and yet I find myself often with 20 or more tabs, usually researching a particular topic. Usually tabs follow a train of thought but fit within a particular context. Session buddy solves this exact problem, allowing me to save a set of tabs and windows which can be resumed later. For example, at the end of the day at work, I save a bunch of tabs, saved as the name of the project I was working on. This allows me to pick up from the chain of thought from when I left off. Switching between contexts is expensive, and session buddy is the best solution I have found.</p></li>
<li><p><a href="https://www.rescuetime.com/">RescueTime</a>:
Holding myself accountable for how I spend time on the web has been eye-opening for me. RescueTime not only tracks how much time during a day you spend on distracting sites, but the desktop application also tracks your non browser time. Over time, it subtly moves you to try and improve your productivity score by avoiding distraction, thus getting more productive (Bravo on the gamification aspect, ResueTime team!) I have discovered patterns of my work through the tool as well, such as the benefits of taking regular breaks and how much standing desk really helps productivity. It however, cannot track that even on productive sites, you can find ways to procrastinate. (I am looking at you, StackOverflow).</p></li>
<li><p><a href="https://chrome.google.com/webstore/detail/block-site/eiimnmioipafcokbfikbljfdeojpcgbh?hl=en">Block site</a>:
As much as tracking my time spent on the web helps, sometimes I need to simply block distracting sites. Block site makes for a great complement to RescueTime, allowing me to either visit whitelisted sites only or block off blacklisted sites. I have found my productivity levels on RescueTime spike when using block sites. Often its a reflex action for me to go to facebook or twitter without much thinking. Block sites counts such attempts, and shames you with clever 404 comments. I love that with the latest update, with one switch, you can turn off the distracting websites and focus on the task at hand.</p></li>
<li><p><a href="https://lastpass.com/">LastPass</a>:
Despite the rise of alternative logins, passwords are still an integral part of the web. With a million sites, having passwords lying around can be rather dangerous. Remembering passwords is time consuming and difficult, adding frustration to the day. LastPass securely stores your passwords for various sites, syncing them across devices. This saves the need to browse through memory trying to dig up a password or worse, store them in flat files. It can also do auto login&#8217;s for your chosen sites. One of my favorite features is that it warns if you are using duplicate passwords for sites, making your web experience more secure.</p></li>
<li><p><a href="https://adblockplus.org/en/chrome">Adblock Plus</a>:
Ok, this one is controversial. Adblock will stop advertisements on websites, keeping you focused and saving time particularly for video ads. Now, ads power the web, and any website with ads as primary revenue stream should be aware of adblock. I particularly enjoy the cat and mouse chase between youtube and adblock: youtube refusing to play videos as long as adblock is enabled, adblock gets smarter, youtube catches up. However, it can make certain sites load faster, thus saving time.</p></li>
</ol>


<!--more-->


<p>Considering how valuable time is, it is important that we get done online what we meant to do. Hopefully, you have discovered an extension or two among this list that you were not aware of before and would help you save some extra time. The better Internet ADD is combated, the more time we spend doing what we love doing or be with family and friends and everybody wins.</p>

<p>This was a post about extensions, but there are certainly tools such as dropbox and evernote which are more than extensions and does boost productivity. If you think there was an extension or tool that I missed, please leave a comment and I would be sure to check it out!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Connected car: Meticulous.io @Angelhack]]></title>
    <link href="http://avidas.github.com/blog/2014/01/07/connected-car-at-angelhack/"/>
    <updated>2014-01-07T23:00:00-06:00</updated>
    <id>http://avidas.github.com/blog/2014/01/07/connected-car-at-angelhack</id>
    <content type="html"><![CDATA[<p>Angelhack looks for startups to come out of hackathons rather than just weekend hacks. As a result, it tends to get very product driven as teams compete for the Angelpad recognition. The theme this year was Apphack, and mobile apps were the key focus. Not really a surprise, as more and more startups build mobile first.</p>

<p>We worked on the verizon telematics data. <a href="http://www.verizontelematics.com/">Verizon telematics</a> is something I did not know about before. Car companies have been working with Verizon to install a device in the cars that could send data about speed, location, rpm, condition of the car in terms of last time since gas, particular model of car, wear and tear to the cloud. I expect Verizon is able to collect a lot more than the columns we saw. Needless to say, this would be a very powerful dataset and it is surprising that there aren&#8217;t more going on in this space.</p>

<p><a href="http://ipython.org/">iPython</a> and <a href="http://pandas.pydata.org/">Pandas</a> are built for analyzing and visualizing tabular data like this. Questions such as which brand of car gave the best milage per gallon, which brand was driven more on the highway vs which was more popular on the city roads were fairly easy to answer. It was not clear if the data given to us was indeed an uniform sample, but results were interesting. However, they are hardly hackathon worthy ideas.</p>

<p>Needed an idea. One set of data had trip ids tied to driver ids, the other set had per trip latitudes and longitudes. Aggregating them somehow would be interesting. Geographical history of most visited places can be found since trips could be tied to drivers. Historical driving records could be obtained from individual trips and the overall history of the driver measured. Global driving records could be obtained so that the best driver&#8217;s can be found.</p>

<p>Once noting those features, the next step was to think how this would make sense as a product. Context sensitive software is hugely in demand and this is a great dataset for revealing patterns of drivers. Buisnesses aware of customers frequenting particular location can push deals and coupons to those individuals to drive buisness. Timeliness of visit can be used to fine tune the deals even more, e.g. lunch deals would make sense around the Grand Central area in NYC to a busy professional. The brand of car can be used to push vehicle specific ads. This would also be a treasure trove of information for car insurance companies figuring out insurance rates. Finally, it is quite possible that driving patterns can be used to trigger alert that may detect an accident ahead of time.</p>

<p>Its hard to argue that driving patterns are valuable data. However, as with any user specific information used for personalization experiences curated by businesses, privacy would be a big concern. It was not entirely clear who would own the data, the driver, the provider, or else. It should be made very clear to the driver of the nature of the tracking going on and how the data may be used. Since data like this could easily be used by a malicious third party to monitor you in real time when you are driving, there is inherent danger in it being available without the driver being informed. Tracking is an issue users of any clowd aware system needs to be aware of.</p>

<p>We did win the Verizon prize for the hackathon, and it was nice having our idea at the eleventh hour being well accepted. Angelhack put on a good show, and I must mention the apps &#8220;Make it Rain&#8221; (literally, on the phone screen) and &#8220;Kanye&#8221;(alerts if you are nearby Kanye West) for the hilarity during the presentation!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hack the Trackers]]></title>
    <link href="http://avidas.github.com/blog/2013/12/25/hack-the-trackers-november/"/>
    <updated>2013-12-25T15:49:00-06:00</updated>
    <id>http://avidas.github.com/blog/2013/12/25/hack-the-trackers-november</id>
    <content type="html"><![CDATA[<p>Online tracking has been a peak topic of debate this year and by the look of things will continue to be. NSA programs, Snowden and the reactions from top tech companies brought in more attention to tracking than ever before. It was hence very timely for Evidon/Ghostery to organize hack the trackers in early November.</p>

<p><a href="https://www.ghostery.com/">Ghostery</a> is a chrome extension that displays trackers on a particular webpage. Not only that, they allow features to block particular trackers and include detailed information about the trackers. The emphasis seems to make web users aware of tracking and let them make the choice.</p>

<p>We built Falcon, which we thought would complement Ghostery&#8217;s offering quite well. Falcon is a chrome extension where we displayed the overall lost time due to the trackers and which trackers were the most resource intensive. Our hypothesis was that to increase awareness of online tracking, we needed to provide tangible ways in which tracking affects online browsing experience. Ghostery provided us with a data set with a lot of interesting information, among which average load time for trackers was a key indicator. Even with caching, users could lose time which would take to load the trackers, if trackers are loaded synchronously. This could particularly matter for mobile and locations with poor wi-fi as poorly created trackers would slow down the browsing experience.</p>

<p><img class="right" src="http://avidas.github.com/images/falcon.png" width="500" height="900" title="Falcon Demo" alt="Falcon Demo"></p>

<p>Building a chrome extension for a first time was not too complicated as it is very similar to building a web page and chrome is as reliable as platforms get. We ended up being one of the two semi finalists, the other being a cool way to link the trackers with their public figures as a fun way to raise attention to tracking.</p>

<p>This hackathon was particularly a great learning experience. Companies are taking highly innovative routes to glean more information about the users. Cookies have always existed, but two other forms of tracking I learnt was autocomplete fields tracking and <a href="http://en.wikipedia.org/wiki/Device_fingerprint">browser fingerprinting</a>. Browser fingerprinting tries to get information from user-agent, the OS, extensions installed and other configurations to bind a particular browser to an user and this can happen completely on the server side. I have only learnt fairly recently about the bidding platforms for display advertisement and it was pretty interesting to see dictionary.com revealing on their console the bids as they happened in real time.</p>

<p>Computer security is a dynamic and fast changing field and this hackathon was an interesting mix of people in different niches of the industry. Tracking will continue to be an issue and it was good to see Ghostery taking the initiative to search for innovations in this space.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Prioritized date interval merge]]></title>
    <link href="http://avidas.github.com/blog/2013/08/30/prioritized-date-interval-merge/"/>
    <updated>2013-08-30T23:57:00-05:00</updated>
    <id>http://avidas.github.com/blog/2013/08/30/prioritized-date-interval-merge</id>
    <content type="html"><![CDATA[<p>Ran into this interesting problem lately and wanted to code up a recursive solution in Python. Essentially an extension of merge from merge sort but for intervals. There is definitely something very satisfying about coding up a recursive solution, as they tend to produce clean solutions despite the ugly formatting in this case to make list concatenation work.</p>

<figure class='code'><figcaption><span>Merge date intervals by priority</span><a href='https://github.com/avidas/Code_snippets/blob/master/merge_interval.py'>Source</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">merge_interval</span><span class="p">(</span><span class="n">low_priority_lst</span><span class="p">,</span><span class="n">high_priority_lst</span><span class="p">):</span>
</span><span class='line'>  <span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="sd"> Given two lists with sorted date ranges, return merged list with high_priority_lst </span>
</span><span class='line'><span class="sd"> ranges preferred over low_priority_lst ranges in case of intersection.</span>
</span><span class='line'><span class="sd"> Partial intervals are allowed.</span>
</span><span class='line'><span class="sd"> &#39;&#39;&#39;</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">low_priority_lst</span> <span class="o">==</span> <span class="p">[]</span> <span class="ow">or</span> <span class="n">low_priority_lst</span> <span class="o">==</span> <span class="bp">None</span><span class="p">:</span> <span class="k">return</span> <span class="n">high_priority_lst</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">high_priority_lst</span> <span class="o">==</span> <span class="p">[]</span> <span class="ow">or</span> <span class="n">high_priority_lst</span> <span class="o">==</span> <span class="bp">None</span><span class="p">:</span> <span class="k">return</span> <span class="n">low_priority_lst</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># case :               |-------|</span>
</span><span class='line'>  <span class="c">#        |-------|            </span>
</span><span class='line'>  <span class="k">if</span> <span class="n">low_priority_lst</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">high_priority_lst</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">]:</span>
</span><span class='line'>   <span class="k">return</span> <span class="p">[</span><span class="n">high_priority_lst</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span> <span class="o">+</span>
</span><span class='line'>          <span class="n">merge_interval</span><span class="p">(</span><span class="n">low_priority_lst</span><span class="p">,</span><span class="n">high_priority_lst</span><span class="p">[</span><span class="mi">1</span><span class="p">:])</span>
</span><span class='line'>  <span class="c"># case :   |-------|</span>
</span><span class='line'>  <span class="c">#                     |-------|      </span>
</span><span class='line'>  <span class="k">elif</span> <span class="n">low_priority_lst</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">high_priority_lst</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]:</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">[</span><span class="n">low_priority_lst</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span> <span class="o">+</span>
</span><span class='line'>          <span class="n">merge_interval</span><span class="p">(</span><span class="n">low_priority_lst</span><span class="p">[</span><span class="mi">1</span><span class="p">:],</span><span class="n">high_priority_lst</span><span class="p">)</span>
</span><span class='line'>  <span class="c"># case :|-------|</span>
</span><span class='line'>  <span class="c">#            |-------|  </span>
</span><span class='line'>  <span class="k">elif</span> <span class="n">low_priority_lst</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">high_priority_lst</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]:</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">[[</span><span class="n">low_priority_lst</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span><span class="n">high_priority_lst</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]]]</span> <span class="o">+</span>
</span><span class='line'>          <span class="n">merge_interval</span><span class="p">(</span> <span class="p">[[</span><span class="n">high_priority_lst</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span><span class="n">low_priority_lst</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">]]]</span> <span class="o">+</span>
</span><span class='line'>                               <span class="n">low_priority_lst</span><span class="p">[</span><span class="mi">1</span><span class="p">:],</span> <span class="n">high_priority_lst</span><span class="p">)</span>
</span><span class='line'>  <span class="c"># case :      |-------|</span>
</span><span class='line'>  <span class="c">#        |-------|  </span>
</span><span class='line'>  <span class="k">elif</span> <span class="n">low_priority_lst</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">high_priority_lst</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">]:</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">[</span><span class="n">high_priority_lst</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span> <span class="o">+</span>
</span><span class='line'>          <span class="n">merge_interval</span><span class="p">(</span> <span class="p">[[</span><span class="n">high_priority_lst</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">],</span><span class="n">low_priority_lst</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">]]]</span> <span class="o">+</span>
</span><span class='line'>                              <span class="n">low_priority_lst</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span> <span class="p">,</span> <span class="n">high_priority_lst</span><span class="p">[</span><span class="mi">1</span><span class="p">:])</span>
</span><span class='line'>  <span class="c"># case :  |-------| |---| |----|</span>
</span><span class='line'>  <span class="c">#        |-----------------| </span>
</span><span class='line'>  <span class="k">else</span><span class="p">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">merge_interval</span><span class="p">(</span><span class="n">low_priority_lst</span><span class="p">[</span><span class="mi">1</span><span class="p">:],</span><span class="n">high_priority_lst</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Complexity :</p>

<!--more-->


<p>Analyzing time complexity for this gets interesting. Consider low_priority_lst to be of length l and high_priority_lst to be of length h. In the worst case each h interval is a sub interval of each l interval. That would give us a result set with 2*l + h elements and the thus the complexity of the algorithm is O(l+h) in the worst case.</p>

<p>Clearly this is not tail recursive, but as far as I know Python does not optimize for tail recursion. Something to think of is to extend it to lists 1&#8230;n, with priority p1 &lt; p2 &lt; &#8230;. pn, and which would give us a complexity of sum(si), 0&lt; i &lt; n-1 where si is the size of the ith interval.</p>

<p>If the lists are unsorted, adapting this method as is would require the caller method to sort the lists beforehand. Sorting being nlogn, it would dominate the linear compexity for and the complexity would be sum(si*log(si)), 0&lt; i &lt; n-1 for the case with n intervals.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VIPHackathon: Know Your Reps]]></title>
    <link href="http://avidas.github.com/blog/2013/08/04/viphackathon-know-your-reps/"/>
    <updated>2013-08-04T09:58:00-05:00</updated>
    <id>http://avidas.github.com/blog/2013/08/04/viphackathon-know-your-reps</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://avidas.github.com/images/Obama_eagle.jpg" width="350" height="350" title="Obama eagle" alt="Obama eagle"></p>

<p>How many people know their representatives for council/state/congress? How many local issues gets routed to the most relevant elected official? How do you know the status of the most relevant issues raised?</p>

<p>To solve some of these issues, we worked on the &#8220;Know your representatives&#8221; app during the Voting Information Project hackathon on 8/3/2013 to introduce elected officials to the public. It is a Windows phone app geared to increase accountability of elected officials which in turn will promote voter engagement.</p>

<ol>
<li><p>Users can view and contact their official and raise their issues to the respective elected official and raise the most significant issues.</p></li>
<li><p>Official can respond to uses and resolve the issues and update the status on the app.</p></li>
<li><p>Users can add their support to prioritize the high priority items by raising their support using the voting button.</p></li>
</ol>


<!--more-->


<p> The app was built with Windows Azure as Backend, Twilio is used for sms notification when officials respond to issues. Azavea is used to bring the elected officals information using the Geo Location.</p>

<p><img class="right" src="http://avidas.github.com/images/VIPhack.jpg" width="350" height="350" title="VIP awards" alt="VIP awards"></p>

<p> We ended up winning Microsoft&#8217;s award for the hackathon! Sadly they only had two phones for the three developers.</p>

<p> Verdict: Twilio&#8217;s API is super cool, and I definitely intend on building more with it. Never built anything on the Windows Phone platform, but I must say in terms of responsiveness, Visual Studio betters eclipse in many ways. Sync Fusion is a great library for app resources, and a similar product for android would be a godsend. VIP did did a good job showing that many voting problems exist despite US being such a prominent democracy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DevsNearMe : July 26-27 Big Data Hackathon]]></title>
    <link href="http://avidas.github.com/blog/2013/07/28/devsnearme-july-26-27-big-data-hackathon/"/>
    <updated>2013-07-28T12:54:00-05:00</updated>
    <id>http://avidas.github.com/blog/2013/07/28/devsnearme-july-26-27-big-data-hackathon</id>
    <content type="html"><![CDATA[<iframe src="http://www.slideshare.net/slideshow/embed_code/24686054 " width="595" height="446" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen></iframe>


<p></p>

<p>Built and won the first prize at the big data hackathon at Alley NYC on July 26-27. The goal is to discover how many people are at a venue at a particular point in time and this app will try to do that for hackers, categorized by skills.</p>

<p>With more and more realtime data being available for the public, identifying knowledge clusters at the right point in time becomes really valuable. DevsNearMe is an Android app that attempts to combine data from popular realtime sharing websites such as FourSquare, Twitter, Facebook, Instagram and MeetUp. It will attempts to predict users at a particular location by taking into account absolute numbers, and weighed prediction based on local context based information and learnt knowledge from past user behavior.</p>

<p>This could be highly useful for knowledge sharing, recruiting and demographic analysis. Prototype code is at https://github.com/DevsNearMe .</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacking health - Third times the charm]]></title>
    <link href="http://avidas.github.com/blog/2013/07/04/hacking-health-third-times-the-charm/"/>
    <updated>2013-07-04T23:37:00-05:00</updated>
    <id>http://avidas.github.com/blog/2013/07/04/hacking-health-third-times-the-charm</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://avidas.github.com/images/PocketHealth_home.jpg" width="275" height="670" title="PocketHealth home" alt="PocketHealth home"></p>

<p>When I think of healthcare industry from a technical view, it seems like a story of regulations, walled gardens and aged systems. It remains a sector where tech really needs to deliver, and we are currently seeing a surge of start-ups such as Quantified Self taking on different issues. So when I stepped into the Northside Festival&#8217;s &#8220;Hacking Health&#8221;, I was not entirely sure what to expect. It was also an unusual hackathon in that the venues were different on two different days. All the pleasant surprise that we ended up winning the hackathon!</p>

<p>The project I ended up working on was definitely something I would want myself. I worked on PocketHealth, and the idea? Carry, check and transfer your medical information like you do a contact. The user can select care givers who can potentially have edit access to the history. But the kicker is in the UI. We worked on a facebook timeline like view for the history, and carrying and sharing your medical medication can be as easily as sharing a facebook profile. Although privacy would need to matter more than a facebook profile, specially with information that is by definition very personal.</p>

<!--more-->


<p>I worked on the backend, working with the Shin-ny API, which provided sample client data. Even though, it did work out in the end, one suggestion to the API providers would be to move away from SOAP and provide a JSON API alongside XML. That is the direction in which the world is going in 2013, and precious moments can be saved by not having to parse through the vortex of XML. Moreover, want to have more developers using your API? Use the specifications with the widest and easiest use cases.</p>

<p>The app was running on Flask, a micro web-framework written in Python. Python&#8217;s philosophy of &#8220;what you see is what you get&#8221; seems to be followed by flask. Together with the fast setup, Flask really wins as a hackathon-friendly backend framework. It would be interesting to compare the hurdles of building a larger scale web app vs other web frameworks. However, setting up assets, routes and getting up and running was possible in a matter of minutes. This is hugely valuable in time crunching hackathons, freeing up time for third-party APIs, application logic and UI.</p>

<p>Judges came from the NYeC, Bing and the NorthSide Festival. It felt great since we only worked for around six hours and were racing on till the last minute for submission. The judges were appreciative of the different sides we managed to involve and deliver value to, and it was great to be validated. There were some other interesting projects as well, one in particular about gamifying medication reminders for diabetic patients.</p>

<p>In the coming weeks, it would be fun to take it past a hackathon project. A centralized solution for accessing and sharing health information is rather difficult, as there are many players involved, hospitals, insurance, doctors and patients. Many aspects of it seems to call for experience. Healthcare has a lot of room for innovation, and we believe that our app would solve a very real problem. At any rate, it felt great as a newbie to have contributed in a small way to the changing tides of healthcare.</p>

<p><img class="left" src="http://avidas.github.com/images/Patient_forms.jpg" width="350" height="350" title="Patient forms" alt="Patient forms">
<img class="right" src="http://avidas.github.com/images/Patient_status.jpg" width="350" height="350" title="Patient status" alt="Patient status"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Angelhacking at Dumbo]]></title>
    <link href="http://avidas.github.com/blog/2013/06/08/angelhacking-at-dumbo/"/>
    <updated>2013-06-08T16:42:00-05:00</updated>
    <id>http://avidas.github.com/blog/2013/06/08/angelhacking-at-dumbo</id>
    <content type="html"><![CDATA[<p>&#8220;This is not your ordinary hackathon. This is the big leagues&#8221;. Such was the claim of Angelhack this past weekend, and two weeks after participating in my first ever serious hackathon, I found myself at another one. There really is something about the mix of meeting cool people, hacking unfamiliar platforms and testing your coding chops in a small amount of time that can be quite addicting.</p>

<p>Shakere, the product I worked on, is an iPhone app for finding people based on skills or interests in social gatherings. Yes, your umpteenth social product, guilty as charged. The space for social discovery really is a heavily contested one, which made me hesitant at first since variants of the idea has been tried by many. I joined however, after realizing that the team would work well together (we actually had a UX designer in the team. Yay!) and this was my chance to experience iOS development, even though I would be developing the backend.</p>

<p>I worked on rolling a RESTful API (https://github.com/shakere/backend), working on the LAMP stack. Though I have not worked too much on LAMP backends before, I must admit that the stack is well suited for rapid prototyping. PHP in particular was a pleasant surprise to work with, in parts because of working with Perl for most of last year. I have had a little stint with Rails, and while Rails seems far more powerful, PHP is more explicit with less magic going on behind the scenes which makes it easier for starters to tinker. However, I did find myself handling quite a few inc files soon and was grepping to find which function was defined where. If I am working on a larger scale PHP project, it would definitely be worth looking into frameworks/best practices for PHP code organization.</p>

<!--more-->


<p><img class="left" src="http://avidas.github.com/images/Shakere_Profile.jpg" width="300" height="800" title="Shakere Profile" alt="Shakere Profile"></p>

<p>We got a neat version working well in time for the demo. The app being frontend heavy, I was done with a bit of time in hand, making it a more pleasant hackathon than the last one. Yet during presentation, we did run into the pitfall of not having tested our demo machines to the projector, and this is really a must if you want to avoid delays during your demos.</p>

<p>The ideas were definitely interesting to look at since the hackathon was not restricted to any particular domain. Some were targeting specifically Microsoft, Paypal or Amazon platforms, who were present at the event and provided prizes for the best app using their APIs. It was specifically interesting when domain experts (such as a scientist in a Columbia lab) came to the hackathon trying to device a service for their community. Field experts can have a certain deep understanding of a space and their demos were a good reflection of that.</p>

<p>We did not win unfortunately but judging did seem fair. The ideas winning were generally the apps which were the most mature or demonstrated a clear need base for their ideas. I particularly enjoyed prepared.ly and their combining the job skill-set with learning tools such as Udacity or CodeAcademy. With some personal analytics and initiatives to pick up the skills fast enough, this service can be very useful for coding job seekers.</p>

<p>For the next such event, I would definitely focus more on rolling out more features faster. We were perhaps guilty of actually going around and getting real user data to populate our databases. I would imagine for pre-shipping products you would want this, and MVPs these days certainly value user early user feedback. Hackathons have different needs from production apps though, and rapid feature deployment wins over iterating and getting existing features perfect. You live and you learn.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Publishing Hackathon]]></title>
    <link href="http://avidas.github.com/blog/2013/05/30/publishing-hackathon/"/>
    <updated>2013-05-30T07:08:00-05:00</updated>
    <id>http://avidas.github.com/blog/2013/05/30/publishing-hackathon</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://avidas.github.com/images/Quiply_home.png" width="350" height="350" title="Quiply home" alt="Quiply home"></p>

<p>Alley NYC is a very exciting location that I recently discovered. Its a collaborative workspace for startups, and on weekends they even open their doors for people trying to learn or fine tune their coding skills. On my second visit, I found out about the publishing hackathon, an attempt by the book publishing industry to generate new ideas in a field where profits are seemingly declining. I love books, and it seemed like a good opportunity to see what I could contribute and I signed up.</p>

<p>This past weekend on the day of the hackathon, I arrived early not entirely sure what to expect. There were quite a few volunteers (from the publishing industry sponsors) and mentors (usually the startup founders who work at Alley NYC) and they seemed rather vibrant and chatty, as people in the startup universe tend to be. I immediately found myself talking to several founders about their projects. The breath of industries startups target always fascinate me, but I needed a project.</p>

<p>At the meetup of participants, it seemed like a lot of people came in teamed with ideas they were going to work on or have already been working on. I soon ran into John, who was in the same boat as me in terms of not having a project. John was an UI/UX person, so we thought it would be a good idea to team up and work on something.</p>

<p>The coding part started at noon, and continued for 24 hours. However, it was interesting being developers, we were sought out frequently as the people with ideas outweighed the developers. After discussing a few ideas, we decided on a project. At that moment, we did not expand the team since there was no clear benefit in doing so.</p>

<p>We decided to make Quiply, a book recommendation service aimed at teens based on their online video watching habits. We thought the playlists, favorites and viewing habits of kids gives a good idea of what they are interested in, and giving them small summaries of books they could potentially read to expand on their interests. We decided on making it as a Node js web application to start with, integrating youtube watch history to give results from Amazon.
The rest of the 24 hours, skipping amusing acts by participants which deserve their separate blog post, was a whirlwind of code, coffee, running into hurdles and staggered progress. In the end we managed make the basic prototype work and submitted down to the last minute!</p>

<!--more-->


<p><img class="left" src="http://avidas.github.com/images/Quiply_quip.png" width="500" height="350" title="Quiply quip" alt="Quiply quip"></p>

<p>Here are a few things that I realized at the end of the hackathon, tips to help out a hackathon novice.</p>

<ol>
<li><p><strong>Have a solid idea of what you are going to do even if you do not have a team yet : </strong> A solid worked out plan helps you convince and recruit team members. Hackers by nature are very good readers of someones preparedness, knowledge and value addition to a project, so if you want the good people to team up with you, get in there ready. A very generic idea approaching a unclearly defined problem would likely not get you many co founders. Lot of hackathons do not allow any code being done before the event, but I am not sure how this is implemented since someone could write a library beforehand with quite a bit of logic that they can just import.</p></li>
<li><p><strong>Know your apis if you are making an web app : </strong> If you are coding in a hackathon, you want to get to the point where your boilerplate is set up and you are spending the bulk of time building the logic or enhancing the UI. Hence, calling your APIs and knowing the limits and associated delays is critical. For this hackathon, this was not the case for us. After prototyping with youtube, we realized that their APIs no longer allow getting tags from videos and scraping was certainly not an option. We had to switch to Vimeo to get the same functionality. The other problem we ran into was Amazon throttling us for API usage. They had a limit of 2000 requests which we reached fast, and had to create stub accounts to continue testing. Thankfully this was not a problem during our demo, and we were able to show the working app.</p></li>
<li><p><strong>Find a good spot quickly with least distractions : </strong> When the participants are not a defined class of people, you get unexpected behaviors and situations that will come up. And once you start coding, these can really harm your productivity. Try to get a nice and quiet place early, and if you find a room with a white board, its a home run for your team.</p></li>
<li><p><strong>Keep focused and realistic : </strong> When we started working, I was particularly excited about writing the recommendation engine and wrote out an algorithm to weigh in several factors and generate tiered results based on the particular website queries. (For example, different custom playlists may give us different interests, how the age of the playlist would factor in, etc). However, with the discovery that youtube was not an option, we had to work with Vimeo API which was much limited in terms of features. That resulted in hours of wasted work. Following this setback, we did a better job of focusing hard on getting the one feature of our app working which was getting the recommended books, without much of the initial breadth or depth of the algorithms we were thinking of. Being realistic about what was achievable in 24 hours allowed us to get a working prototype, and this is very important in hackathons where wealth of APIs and possibilities can hinder your progress.</p></li>
</ol>


<p><img class="right" src="http://avidas.github.com/images/Quiply_login.png" width="400" height="350" title="Quiply login" alt="Quiply login"></p>

<p>There were an interesting array of projects presented, some more matured than others by virtue of being worked on before. But they were mostly web apps or mobile apps, simply because that is what most developers are working on these days. We were not one of the finalists, but overall I was very glad to reach and idea, and generate a fully working app within the 24 hours and it was a whole lot of fun! I would absolutely do more hackathons from now on, just not every weekend.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First post!]]></title>
    <link href="http://avidas.github.com/blog/2013/01/25/a-new-start/"/>
    <updated>2013-01-25T22:38:00-06:00</updated>
    <id>http://avidas.github.com/blog/2013/01/25/a-new-start</id>
    <content type="html"><![CDATA[<p>There comes a point in everyoneâs life when one thinks, I should have a blog. I had that thought in my head a couple times, a couple years apart. First time, it was the summer of 2008 and I was ready for a huge direction change in my life, going to college in the United States. And it was supposed to be about the experiences. Well lets just say college handed me enough on my plate to forget that idea soon. Second time, I was a sophomore at college when I wanted to make a tech-news-opinion blog. Few posts after, I realized it was quite unappealing to me. I did enjoy writing, but it was just not my thing to write a blog solely about outside events. Specially since Facebook made expressing your opinions so to all your friends as easy as typing a status message.</p>

<p>I cannot see into the future, so I cannot predict the longevity of my blog. I graduated college in May 2012, and have been working as a software engineer ever since. My hope is that my status as a grownup would discount an early demise for my blog. Kidding aside, there are real reasons why I feel more than at any point, I really do need a blog.</p>

<ol>
<li><strong>Express self-learnings</strong> Post college, I am getting the opportunity to learn a lot more on my own. I needed a place to share what I am learning.</li>
</ol>


<!--more-->


<ol>
<li><p><strong>Bring cohesiveness to my work</strong>
Directly related to 1, I hope documenting my learning and getting started with projects of increasing complexity will be a nice side effect of this blog. In the past, I have been guilty of starting projects and not donating enough time to them. I mean to change this habit for projects I start caring about.</p></li>
<li><p><strong>Blogging is fun with Octopress</strong> I discovered Github pages and hosting only a month ago, and just makes blogging plain fun for a coder. You get the minimalism with the Octopress scaffolding and publishing, get to blog in the terminal with Vim and is very extensible and Jeckyll, the static site generator underneath, is very extensible.</p></li>
</ol>


<p>There are plenty others I suppose, but enough for the first post. This will be a blog mostly for my code, projects and discoveries I make along the way. Hopefully something shared here will be helpful to the reader, the way countless blogs on the interwebs help me everyday.</p>
]]></content>
  </entry>
  
</feed>
