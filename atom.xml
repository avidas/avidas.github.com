<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Avi Das]]></title>
  <link href="http://avidas.github.com/atom.xml" rel="self"/>
  <link href="http://avidas.github.com/"/>
  <updated>2019-03-17T15:31:46-04:00</updated>
  <id>http://avidas.github.com/</id>
  <author>
    <name><![CDATA[Avi (Ananya Das)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Life lessons from Improv]]></title>
    <link href="http://avidas.github.com/blog/2019/03/16/life-lessons-from-doing-improv/"/>
    <updated>2019-03-16T15:07:00-04:00</updated>
    <id>http://avidas.github.com/blog/2019/03/16/life-lessons-from-doing-improv</id>
    <content type="html"><![CDATA[<p>I think life should be more like improv and improv should resemble life.</p>

<p>On a whim, I went to hideout theatre in Austin, TX for a improv beginner class back in 2016 but I have only been consistently doing improv for the past year. In the process, I have tried short and long form improv, and dabbled in musical/rap improv. Having zero theatre/stage background, it has been amazing to me how the lessons learnt from improv apply to life broadly.</p>

<ol>
<li><p><strong>Yes, and..</strong>: A 101 on improv would begin with the encouragement to accept whatever the other person is bringing to the scene. We may have a great idea in mind, but the scene is ruined if we do not accept the other person&#8217;s ideas and bind the scene in a cohesive way. Taking this attitude to life can frame anything in life as a gift. This in turns lends us to be less critical and cynical about our day to day interactions.</p></li>
<li><p><strong>Go with the first thing that comes to mind</strong>: Perfect is often the enemy of the good. Overthinking can stand in the way of action when spontaneity may have been the right choice. In improv, trying to think of a funny punchline can ruin an act, taking away from it the natural flow of the scene. On the other hand, going with the first thing that comes to mind often leads a scene to wonderful surprises. Real life decisions do involve more thought, but the training against overthinking still holds and can help us live a more spontaneous life and overcome the fear of taking action.</p></li>
<li><p><strong>Embracing failure</strong>: Making a fool of yourself is encouraged and celebrated in improv. The very act of complete unpreparedness on stage, taking the audience&#8217;s suggestion to theme a scene and strangers as partners means that you don&#8217;t have any semblance of control. There is no guarantee that an improv scene will be funny to the audience or reach a satisfying closure. But everyone in improv understands this, and supports your choices on stage regardless. This empowers improvisers to be authentic on stage. It also makes us realize that the consequences of failure may be less than we realize. This training is so important in life where fear of failure can hold us back.</p></li>
<li><p><strong>Make others look good</strong>: In improv, we succeed when we have made the others on stage successful. Supporting their ideas, pointing out the authenticity of their actions and emotions goes a long way into making a scene feel natural and relatable to the audience. When working with improvisers who are gifted in building out storylines, a great way to complement their work is to add other dimensions to the scene such as a location, timeline or other context to create a richer, vivid scene. This prioritizing of win-win mentality is a great habit for teams, since an effective team should be greater than the sum of its individuals.</p></li>
<li><p><strong>Make statements, don&#8217;t ask questions</strong>:
Making statements adds material to a scene, whereas a question puts the burden on the other to come up with the material. This is why it is encouraged in improv to limit questions and respond with statements. This is great for your communication skills, making conversations feel less like interrogations. People feel more at ease in a conversation when they feel they don&#8217;t have to do all the work. A related advice is to try and use every sentence in improv as if it would be a closing sentence, since a scene could end at any moment. <!-- more --></p></li>
<li><p><strong>Leading with emotions</strong>:
An audience is watching an improv scene has a fuller experience when they not only hear the words but see the emotions of the performers. Life is certainly more complicated. If you are investing in the stock market or playing poker, it is best to distrust or hide your emotions. On the other hand, lot of us lack the ability to emote even when situations demand it, because our upbringing has taught us to treat display of emotions as weakness. Improv can help unlearn and be more expressive in situations when we should lead with our emotions.</p></li>
<li><p><strong>Take the scene somewhere</strong>: In an improv scene, you and your partner create a character and a world which has the shelf life of the scene. The scene can be as short as a minute and half. It is great for the audience when the scene builds up to something, has a beginning, middle and end. In the movie of our lives, we are the protagonists living our story. The practice of improv helps us build a viewpoint of our lives from a third party perspective, and can make us wonder how we want the protagonist to act. To use a computing analogy, it would be similar to seeing life from a debug mode.</p></li>
<li><p><strong>Listen</strong>: There simply cannot be a good scene where you ignore the words, behavior and actions of your partner. Improv helps emphasize the importance of listening, the power of which is well understood.</p></li>
<li><p><strong>Have fun</strong>: The audience knows when the performers are enjoying themselves, and can feel they are part of it too.</p></li>
<li><p><strong>Commit to a scene</strong>: A more experienced improviser advised me to commit with your voice, face and your body. The practice of complete immersion in a scene can help us be more present when we show up in life.</p></li>
</ol>


<p>The beauty of improv is that you don&#8217;t have to become a great improviser to see the positive effects it can have on your life. Those of us who believe in constant improvement and are interested in living a more examined life and will find improv valuable.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pull requests as gift exchange]]></title>
    <link href="http://avidas.github.com/blog/2019/03/16/pull-requests-as-gift-exchange/"/>
    <updated>2019-03-16T15:04:00-04:00</updated>
    <id>http://avidas.github.com/blog/2019/03/16/pull-requests-as-gift-exchange</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thoughts on button push driven development]]></title>
    <link href="http://avidas.github.com/blog/2019/02/24/on-button-push-driven-development/"/>
    <updated>2019-02-24T09:19:00-05:00</updated>
    <id>http://avidas.github.com/blog/2019/02/24/on-button-push-driven-development</id>
    <content type="html"><![CDATA[<p>I was in a conversation the other day when someone mentioned</p>

<p><em>&#8220;We may only be a couple Moore&#8217;s Law iterations away from all software built by pushing buttons and WYSIWYG editors.&#8221;</em></p>

<p>This made me think of the software that we write today and the direction software is going. It also made me think of why I got into software and am still in this profession.</p>

<p>Lately, I have been very curious about voice as a computing platform and what that will do for applications we use in future. Thankfully, as software engineers, we don&#8217;t have to hypothesize. We can build it.</p>

<p>Digging into Alexa skills development has been interesting. While the technical documentation and development for Alexa is quite good, I felt a fair amount of internal resistance during the project. The potential of this new computing platform and the possibilities it will bring kept me going.</p>

<p>The building blocks of working with Alexa are intents, utterances and lambda functions. After a series of thirty or so steps of wiring up buttons, copying and moving templates around, setting up attributes gives you a working voice enabled app, upload zip files, deploy it and submit for app review in the Alexa app store.</p>

<p>Why did I feel the resistance? Any new tool or language will bring an initial set of frustration before we achieve a minimal level of proficiency. But Alexa development felt like using a software program rather than programming. It felt challenging the way gruntwork feels challenging and as opposed to intellectually stimulating. It also felt opposite to when I have felt the most joy during programming. When I had a strong grasp of the vocabulary of the language and the meta-language (libraries, development environment,runtime, etc), leaving room for higher level product/architectural decisions where most things are a tradeoff. This meant I had to do <em>very minimal context switching</em>. When writing an app for Alexa, it feels driven by context switching.</p>

<!-- more -->


<p>Continuous context switching has real penalties. In <a href="https://www.amazon.com/Deep-Work-Focused-Success-Distracted/dp/1455586692">Deep Work</a>, Cal Newport points out that the more time we spend effortlessly focusing on a difficult task, the happier we are. The ability to do deep work is one of the greatest joys of programming. So while using WISYWIG or code as configuration can lower barrier to entry for software development, they do take away the mindful aspects of programming.</p>

<p>That left me with the following thoughts.</p>

<ol>
<li>Democratizing building of software applications is the direction in which software should go. Just like literacy, tools of creativity should not be limited to those who have the time to learn or funding to hire people to do it. If information hoarding is one&#8217;s only advantage, one is asking for disruption.</li>
<li>If solving problems is what gets you excited about programming, in the next decade you will want to think about focusing on areas more resistant to this change. Infrastructure and tools development are more resistant to this change than application development, but there is less of it to be built compared to applications.</li>
<li>Programming is still a difficult thing to do. Building quality, lasting software is expensive for a business. For a business, the ability to reduce this cost by using WISYWIG tools or code as configuration will always be appealing.</li>
<li>WISYWIGs encourages dependence on higher level tools which reduces the need to learn about the fundamentals and increases the risk when the tools themselves break.</li>
</ol>


<p>I hope this is a blogpost I get to laugh it in five years due to how much things have changed. But I do think this trend in software development has consequences as far as who will be interested in programming in the future and the intention people have when they get into programming.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Books I read in 2018]]></title>
    <link href="http://avidas.github.com/blog/2018/12/24/books-i-read-in-2018/"/>
    <updated>2018-12-24T14:07:00-05:00</updated>
    <id>http://avidas.github.com/blog/2018/12/24/books-i-read-in-2018</id>
    <content type="html"><![CDATA[<h3>General/Personal Development</h3>

<ol>
<li><strong>The art of living (Thich nhat hanh)</strong>: This is the best Thich nhat hanh I&#8217;ve read, composing his philosophy on living an examined life into day to day practices.</li>
<li><strong>Thinking in systems, a primer (Donella Meadows)</strong>: Really, really smart author, systems thinking should be a required course in college.</li>
<li><strong>Ain’t I a Woman: Black Women and Feminism (Bell Hooks)</strong>: Challenges a lot of assumptions, covering black woman&#8217;s involvement with race identity and feminism.</li>
<li><strong>When: The Scientific Secrets of Perfect Timing (Daniel Pink)</strong>: Dan Pink&#8217;s books are similar to Malcolm Gladwell&#8217;s, distilling behavioral psychology research into easy reads.</li>
<li><strong>The Essential Rumi (Jalal Al-Din Rumi)</strong>: Lately I have started admiring how much Poetry can accomplish with so few words. There is something very calming about reading Rumi.</li>
<li><strong>Sex at dawn (Christopher Ryan‎, Cacilda Jethá)</strong>: An incendiary/challenging investigation into human/primate sexuality, sweeping across history to construct the narrative, much like Sapiens by Yuval Noah Harari.</li>
<li><strong>Deep work (Cal Newport)</strong>: So good, anyone doing knowledge/creative work would be benefited by this classic.</li>
<li><strong>The life changing Manga of Tidying Up (Marie Kondo)</strong>: I have been leaning towards minimalism, and Marie Kondo offers very actionable steps to cleaning up, and why doing this is related to the life we want to have.</li>
<li><strong>Flow: The Psychology of Optimal Experience (Mihaly Csikszentmihalyi)</strong>: There is strong evidence at this point that time spent in flow state, (an state of effortless concentration on a single task), can be correlated to contentment/happiness. I really liked the first part of the book but thought it could be much shorter.</li>
<li><strong>Daring Greatly: How the Courage to Be Vulnerable Transforms the Way We Live, Love, Parent, and Lead (Brene Brown)</strong></li>
<li><strong>So good they can’t ignore you (Cal Newport)</strong>: Much like deep work, essential reading for those looking to improve their craft.</li>
<li><strong>How to change your mind (Michael Pollan)</strong>: Eye-opening, challenging look at the resurgence of Psychedelics in mental health research.</li>
<li><strong>A life in parts (Bryan Cranston)</strong></li>
</ol>


<!-- more -->


<h3>Tech</h3>

<ol>
<li><strong>Radical Candor (Kim Scott)</strong></li>
<li><strong>The Phoenix Project: A Novel about IT, DevOps, and Helping Your Business Win (Gene Kim)</strong> A curiously engaging fiction on DevOps and executive level politics in a large tech company.</li>
<li><strong>Designing data intensive applications (Martin Kleppmann)</strong>: One I will be re-reading many times.</li>
<li><strong>The master algorithm (Pedro Domingos)</strong>: An inspiring call to action and possibility of general artificial intelligence.</li>
<li><strong>The manager’s path (Camille Fournier)</strong></li>
<li><strong>The Passionate Programmer: Creating a Remarkable Career in Software Development (Chad Fowler)</strong></li>
</ol>


<h3>Running</h3>

<ol>
<li><strong>Running Rewired: Reinvent Your Run for Stability, Strength, and Speed (Jay Dicharry)</strong></li>
<li><strong>Endure: Mind, Body, and the Curiously Elastic Limits of Human Performance (Alex Hutchinson)</strong></li>
<li><strong>North (Scott Jurek)</strong>: Loved how personal this story was both for Jurek and his wife Jenny, alternating their narratives</li>
<li><strong>Again to Carthage (John L Parker)</strong>: Amazing in certain parts, especially near the end where Cassidy runs Olympic trials, but too long and dragging for most of it.</li>
<li><strong>Running with the mind of meditation (Sakyong Mipham)</strong>: What does a lifelong meditator who also ran the Boston marathon has to say about the sport?</li>
</ol>


<p><em>In no particular order, mostly read while being on the NYC subway!</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Core tenants of highly effective software teams]]></title>
    <link href="http://avidas.github.com/blog/2018/11/03/core-tenants-of-effective-software-teams/"/>
    <updated>2018-11-03T11:47:00-04:00</updated>
    <id>http://avidas.github.com/blog/2018/11/03/core-tenants-of-effective-software-teams</id>
    <content type="html"><![CDATA[<p><em>This blogpost is my thoughts only and does not necessarily represent the positions of current or past employers.</em></p>

<p>We don&#8217;t build software in a vacuum. Software involves people. Beyond organizations of a handful of people, hierarchy is beneficial. We get teams, commonly with engineering manager/lead, product manager, designers and engineers. What becomes crucial for the software and the product delivered then is the effectiveness of the team. Throughout my career in the industry and being part of many teams in different circumstances, I have started noticing some key patterns that really drives standout results in teams.</p>

<ol>
<li><p><strong>Believing in a common cause</strong>: The single biggest observation is that when a team of people believe in a common mission, they produce outsized returns. The most effective teams I have worked in all had a strong belief that they was a reason for the work they were doing. This also aids inter team collaboration over inter team competition, with teams often investing in tooling that makes the whole team better.<br/><br/>Engineering leaders can play a key role here to frame a compelling mission for the team. Hiring for the right role also becomes super important as a highly motivated individual in a role can be 2-10x more effective than someone unmotivated with similar ability. Having a competitor or a common enemy is great since we are predisposed to bond over defending ourselves from common enemies.</p></li>
<li><p><strong>Psychological Safety</strong>: Google&#8217;s <a href="https://www.nytimes.com/2016/02/28/magazine/what-google-learned-from-its-quest-to-build-the-perfect-team.html?_r=0">Project Aristotle</a> studied 180 teams over two years and came to the conclusion that psycological safety was the best signal for how effective a team is. How comfortable do people in the team feel to share vulnerability without fear of retribution? How comfortable do people feel asking questions without fear of asking something silly or share ideas without fear of being shut down without listening? Team&#8217;s with high levels of psychological safety can have conflicts, but can deal with them in a mature way, being able to separate disagreement about ideas from disagreement with people.<br/><br/>For more senior engineers/technical leaders, this is crucially important since they are in a position to determine this culture for the team. Forming strong personal relationships with the team can be really valuable for fostering safety within the team. People like their leaders to be human, and admitting your own fallibility is a great way to form trust with team members.</p></li>
<li><p><strong>Diversity of Thought</strong>: Diversity is a word that is commonly heard in the tech industry, and for good reason. Having diversity of people is a proven way to achieving diversity of thought, which is just one of the reasons why we must invest in software communities of women and minorities. Inclusiveness is one of the key pillars of psychological safety in a team, building on from the last section. Moreover, when software is aimed at global audience, but the team is homogeneous, it is easy to be fooled that a wide audience will get their needs met.<br/><br/>Even teams of experienced contributors can fall prey to atrophy and decay, without fresh ideas so common in upstarts. A team of really excited newer developers may not realize that in balance lies the key to long term personal, team and product success. Diversity of experience in a team helps to avoid these common traps.<br/><br/>Finally, cross functional teams can be more effective than teams exclusively focusing on frontend/backend/mobile. Recognizing the individual contributor&#8217;s interest in user experience/security/governance etc and enabling space for that one of the most enabling things an engineer leader can do.</p></li>
<li><p><strong>Growth and Ownership</strong>: It is immensely gratifying for people to feel that they are growing, and knowing that they are playing a role in the growth of others. When team members feel confident about the path in front of them can still have challenges, they are far less likely to be unmotivated and plateau. This is big for retention, since job changes frequently are a result of people feeling stuck and needing to make a change. It is costly to replace engineers, especially ones already trained and performing well in their role.<br/><br/>A key intrinsic motivator for many is the feeling of ownership. Being able to really sink their teeth into a hard problem and come up with something they are proud of. Teams where people really believed that they have strong ownership of the product also care more about the end users experience, resulting in a better product.<br/><br/>As engineering leadership, one of the best signals of good management is to have clarity in career ladders and promote the right people. A bias for people who make others around them better can be healthy. It is my experience that promotions should rarely come as a surprise to the individual or the team. Demonstrated investment in people as future leaders is also a major indication of a company&#8217;s belief in their people, sending them to conferences, training and giving license for creativity.</p></li>
<li><p><strong>Work Environment</strong>: This is a controversial one, but I do believe that companies today have bought way too much into the open office movement. While a return to cubicles does not feel desirable, dedicated interruption free zones (both space and time) are essential for good software. A chaotic office environment can also mean chaos in your codebase.<br/><br/>Debates range whether standing desk or sitting is better, however many monitors are necessary. My belief here is that the team should be colocated but individuals should be empowered to find the best working situation for the track of work they are in. I have personally found that standing keeps me on my toes, making it great for lots of small tasks, whereas sitting is best for tasks that need deep thought.</p></li>
</ol>


<p><strong>When things fall apart</strong></p>

<p>We do not live in a perfect world. Recessions, unexpected downsizing, market competition and many other forces can impact access to resources which could result in ways in a group of people come in to work together and stop working together. Lot of us have all worked in a team where that magic of a great team existed, and the team achieved things together what could not be achieved by individuals. It is important for us to be thinking with intention and purpose and help each other build and find teams to discover that magic.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jersey Half Marathon 2018: Race Report]]></title>
    <link href="http://avidas.github.com/blog/2018/05/09/jersey-half-marathon-2018-race-report/"/>
    <updated>2018-05-09T10:21:00-04:00</updated>
    <id>http://avidas.github.com/blog/2018/05/09/jersey-half-marathon-2018-race-report</id>
    <content type="html"><![CDATA[<p>&#8220;Gatoradeee!! Water!&#8221; The sudden enthusiastic cheer after a period of silence was hard to miss. Looking up, I saw the 10k marker. I looked at my watch and I was about to PR a 10k. Except that I was not running a 10k. I was running a half Marathon and with more than half of the race still ahead of me, this was bad news.</p>

<p>Post NYC marathon last November, I was happy to have run my goal race in a good time. I knew I was hitting my upper limits with the Marathon, and without focus on shorter distances, I would not get faster. I focused religiously on the Tuesday tempo and Thursday speed workouts with the Dashing Whippets central park group. It was inspiring to see the people training for Boston Marathon putting in incredible work during some difficult months.</p>

<p>This season’s training posed many challenges, primarily freezing temperature, snowstorms, breakups. Every time I stepped out the door and breathed in the icy air into my lunges, everything inside me wanted to get back inside and wrap myself in a blanket.  But the workouts had a way of enforcing discipline into my life. For Saturdays, I made the commitment to keep showing up and sometimes challenge myself by going with a slightly faster group.</p>

<p>The group kept me going. If everyone else have no problems showing up and putting in the work in dark and cold, I have no excuses not to. When I was in the pain cave during the Jersey Half, that was what going though my head. I am in the deep end, but I owed my 600 mile training cycle a good performance and take responsibility for strategic mistakes early in the race.</p>

<p>As I realized my mess up during the Jersey half, I realized I needed a baseline pace or I would fade. My inner voice said don’t fade, every second counts. So I found couple runners putting down 7:15 miles and making it look like cakewalk. Later I learnt that they were running the marathon. Talking to them helped me get some boost. After that, I found another pace group, and hung with them all the way to the end.</p>

<p>The value of this race as a developing runner is that it answers some lingering questions. How fast am I? Am I capable of taking my progress in training and convert it on race day? Am I training with the right group of people or just tagging along with faster runners for dear life. That’s what this half will mean for me, that I have improved this training cycle and while my strategy and mental game needs work, I can enjoy the following week knowing I made progress. Progress where I used to think there is no way I can hold a 7:09 pace for 13 miles but there is now data to prove otherwise.</p>

<p>So that was the Jersey Half. I am very happy with the result having converted a 10 minute PR. However, I would like to get there next time more gracefully and not feel totally wrecked at the end.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lower Degrees of Separation with End Users]]></title>
    <link href="http://avidas.github.com/blog/2018/05/09/degrees-of-separation-with-end-users/"/>
    <updated>2018-05-09T10:21:00-04:00</updated>
    <id>http://avidas.github.com/blog/2018/05/09/degrees-of-separation-with-end-users</id>
    <content type="html"><![CDATA[<p>When working in software, one way to look at our profession is to say that we take architecture docs or designs and make code out of it. After years in the industry, we are trusted to come up with the architecture docs and work with a team to deliver the software. This absolves ourselves of responsibility in a way since even if the product fails, at least our code and systems were great. Companies today, however, are starting to see the limitations of software engineers being removed from the product decision making process.</p>

<p>I think we should reframe the problem: it is rather our responsibility as software engineers to ask, how many degrees of separation does it exist between us and the end user? Ideally, the end user would be the person paying for our service, although this gets more complicated certainly by ad funded or venture funded software. The exercise could involve us asking, what would it take to reach 10 users of our software? Would we have to go through our product manager, who then talks to the account manager or product support? These are likely the folks currently dealing with customer calls when our software bresks and waiting for the Zendesk tickets to be picked from the queue.</p>

<p>Who we are &#8220;engineering&#8221; for is a question we need to frequently ask ourselves. We should strive to be in environments where we are aware of our degree of separation and look for ways to cut down that separation. Without that frame, we can only have vague ideas of what the code we write is leading to, and end of the day limits the impact we can have.</p>

<p>It should also not always be the product manager&#8217;s job to always acting as the liason to translate user needs to us. When we are aware of user needs, it enables us to be proactive: to avoid that shortcut when building, or deal with that performance bottleneck early before it becomes a problem. We can also free the up the product manager to pursue broader goals such as product vision, market and competitive landscape analysis, etc.</p>

<p>Tomorrow, when you get to work, ask yourself that question. Do you know who your users are and how they use your product? How many degrees of separation would you have to navigate to find that answer? If you are not comfortable with the answer, maybe you can think of a way to change that.</p>

<p>Disclaimer: Thoughts expressed in the article are mine only, and does not represent the positions of current or past employers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NYC Marathon 2017: Training and Race Report]]></title>
    <link href="http://avidas.github.com/blog/2017/11/07/nyc-marathon-2017-race-report/"/>
    <updated>2017-11-07T09:06:00-05:00</updated>
    <id>http://avidas.github.com/blog/2017/11/07/nyc-marathon-2017-race-report</id>
    <content type="html"><![CDATA[<p>I ran the NYC marathon this Sunday. On my fourth marathon, I was going for 3:45, came off with a 3:38, personal best by 4 minutes. More than the time, a vanity metric, I was happier about the race execution, doing negative splits, avoiding cramps and bonks/hitting the wall. NYC marathon is a technical and challenging course, but I found it could reward patience and training. It was also an emotional roller coaster for me, NYC being a focal point during majority of my time in the US.</p>

<p><strong>Training</strong></p>

<p>Big part of my marathon was made during the months prior. I have ran marathons before, most recently in Feburary in Austin, so I know my body is capable of handling trials of the 26.2. But I was carrying over my adductor injury from March, and since moving to NYC, its been a slow ramp back up on the miles. Joining the Dashing Whippets in NYC was a great decision, as all my running progress can be attributed to training with groups in Austin, Austin Runner&#8217;s Club and Austin Runner&#8217;s Meetup. Post June, I had to patiently wait for my speed/endurance to catch up as I stopped running since March. Whippets are a great group, as they are both very competitive and large enough where runners of different paces can have others to run with.</p>

<p>Once summer turned into fall, I was beginning to get the mileage adaptation back up. Besides the Saturday long runs, I worked on Harlem hill repeats on Sundays and speed work with the Whippets on Thursdays. Putting those fast and hilly miles were instrumental to getting myself back into marathon shape. Alongside with Tuesday workout with the whippets, I was able to get my weekly mileage up to 55 early October, more than I&#8217;d ever done. However, at this point I had to cut back since the workload was triggering overuse injuries in calves and ankles.</p>

<p>This is what my peak weak mileage looked like</p>

<p>Saturday: 20m long run (Whippets)<br>
Sunday: 8-9m Harlem Hill repeats<br>
Monday: Rest<br>
Tuesday: 12m (Central park Whippets)<br>
Wednesday: 5m easy<br>
Thursday: 10-12m (Speed work on East Side with Whippets)<br>
Friday: Rest<br></p>

<!-- more -->


<p><strong>Nutrition</strong></p>

<p>NYC marathon has been my goal race, and I took nutrition and hydration leading to the race very seriously. Prior to race day, this involved hydrating well, drinking about 1.5 gallon of water a day. It also involved giving up alcohol for a month before the race. I remembered cramps from salt depletion in the Austin marathon, and I added salt to my food leading to race and carried salted water with me on race day. I carb loaded leading to days prior to the race except before race day when I stuck to really simple food heavier in carbs, potatoes, sweat potatoes, eggs. On race morning, I got coffee and simple carbs such as oats, apple and a bagel/banana on the route. During the race, I used 4 Cliff Gels, one every 5 miles, an approach which worked well for me in the Austin Marathon. On the race course, I alternated between water and gatorade every other mile. This helped me avoid cramps and hitting the wall during the race.</p>

<p><strong>Getting to start line</strong></p>

<p>NYC marathon is tough logistics wise, so I wanted to reduce chance of things going wrong as much as possible.  Race day is stressful, and I wanted to limit variability. Spending the night on Wall Street gave me an extra hour of sleep and less subway stress en route to the ferry. Meeting up with friends I have been training with was also good to calm down race day nerves. The ferry ride set a tone as I was feeling excited and giddy with Statue of Liberty looming large in the mist. Waiting for the buses post ferry was more of a slog, with standing long being the last thing I wanted before the marathon. Off the bus, and post Porter Potty visits, I heard the announcement of my Corral being closed in 5 minutes. 5 minutes! I ran frantically to look and find my corral. Eventually I managed to get in just in time for my wave. That left half an hour of waiting for the race.</p>

<p>I dressed warm heading to Staten Island, and this was the time to get rid of the baggage and get some warmup in my system. I love talking to runners before races. In a race like the NYC Marathon, everyone I talked to had a super interesting story.</p>

<p><strong>The race</strong></p>

<p><strong>Staten Island</strong></p>

<p>For the first time, I decided to run a marathon without a pacer, phone or watch. I put trust in that my experience of running 3 marathons and training would be enough to run by what Marathon effort should feel like. My goal was to be conservative as long as possible as a course like NYC deserves respect and a cautious approach.</p>

<p>After the short opening ceremony, we finally took off. It immediately started drizzling rain, not ideal but far from worst conditions. My spirits were pretty high, despite everything, I was running the NYC Marathon! As we ran up the Verrazano Bridge, I wished for a clearer day as the iconic view of Manhattan on top of the Verrazano was blurry in the fog. I brought my focus back to the road and the blue line markers on the road, which mark the point to point 26.2 mile during the race.</p>

<p><strong>Brooklyn</strong></p>

<p>Downhill from the Verrazano, it was steep decline but not the time to speed. I checked my pace, letting most runners pass me by. We were gradually moving down the bridge towards Brooklyn, which could only mean one thing. Crowd support!</p>

<p>And what a crowd it was! Brooklyn was my favorite part of the race. They brought music, diversity, energy and smiles. Bay ridge leading to Park Slope, Flatbush and then running through Williamsburg was an absolute riot in the best way possible. There were times when if I spread out my hands I could reach spectators on both sides. Not a problem with such a well behaved and well wishing crowd. There were bands and choirs and some great signs: &#8220;You can overcome the path once you become the path itself&#8221;.</p>

<p>NYC Marthon is a race of two halves. Most of the first half is in Brooklyn and is also some of the easier parts of the course. My goal here was to run slightly under Marathon effort, and making sure to fuel/get water along the way.</p>

<p><strong>Queens</strong></p>

<p>Finally we were at the halfway point in the race, up top the Pulaski bridge. We heard the announcement that Shalane Flannagan just won the women&#8217;s race and groups of people erupted into cheers. This set a great tone leading into Queens.</p>

<p>Queens does not get a lot of mileage but it is the lead up the most talked about part of the course, the infamous climb up the Queensboro bridge at mile 15.</p>

<p>This was a key part of the race for me. For the second half of the course, I wanted to start pushing, starting with uphills. Hence Queensboro was the acid test for how my marathon would shape up. While the ride up Queensboro was hard, I was passing people all the way which gave me a lot of confidence.</p>

<p><strong>Manhattan to Bronx</strong></p>

<p>As we ran down Queensboro, a low hum grew louder and finally erupted into cheers as we descended down Queensboro to reach Manhattan. The crowd here is boisterous and makes for a landmark moment of running this race.</p>

<p>In Manhattan, going up 1st avenue, my priority was to still run at a fairly conservative pace as there was still 10+ miles left. Getting rid of my waistbelt at mile 16 was helpful as I got rid of some weight. The latter part of 1st avenue is surprisingly hard psycologically, as crowd support fell further into the course. This was also the part of the race where goals and training for the race starts to become important.</p>

<p>Crossing the Willis bridge, we got to Bronx. I have ran this part of the course, and I was looking forward to the Whippets cheering section, which comes right at the edge of Bronx, at mile 21 as I moved my way back into Manhattan. It was at this point too that I was starting to realize not only I could break 3:45 but a PR (personal record) was possible, which brought a fresh wave of motivation.</p>

<p><strong>Back to Manhattan towards central park</strong></p>

<p>Back into Manhattan, going across fifth avenue, this is where I started to increase to full effort, knowing that with each step, the course was getting more and more into familiar terratory. Despite that, mile 23 was likely the most challenging of the whole race, a steady incline up 5th avenue on tired legs. But this also where the training mattered the most.</p>

<p>Once we entered Central park on 91st street, this was the home stretch. This is where I was really going for it, fixing my attention on one runner, catching up to them and repeating. I have ran central park enough to know the inclines and declines and with every step, it was getting closer to finish line. We were on mile 26 and at this point we left the park, run adjacent to it and finally come back. The last 400 yards were memorable, running through a painful haze but moving closer to that immaculate finish line and eventually reaching it. I knew I had PRed, I did not know by how much yet.</p>

<p><strong>Post Race thoughts</strong></p>

<p>Broadcasting to everyone how to track me on race day was motivating for me as I knew friends and family in NYC, Austin and Bangladesh would be watching. Ultimately, NYC being my goal race, I wanted to give everything I was capable of. 2017 NYC marathon was a race in which I was able to apply some of the race advice and strategies and this was the first time I&#8217;d ever hit negative splits in a race. It was really an unforgettable race, running with 50,000+ people and going through all the iconic NYC sights.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web Payments by First Principles: Data Architecture]]></title>
    <link href="http://avidas.github.com/blog/2017/10/25/web-payments-by-first-principles-data-architecture/"/>
    <updated>2017-10-25T20:22:00-04:00</updated>
    <id>http://avidas.github.com/blog/2017/10/25/web-payments-by-first-principles-data-architecture</id>
    <content type="html"><![CDATA[<p>Once you start receiving payments on your site, congratulations! You are likely building something people want. But now you are at the point of having to manage payments data. Developers are generally aware that handling payments data should be done with care, but it is not immediately obvious what the different considerations are. In this blog post, we will go over strategies that you can follow to future proof your payments stack from the point of a fledgeling startup to a mature, stable business.</p>

<p>With storing payments data, there are quite a few considerations. What you should store and shouldn’t. In the event of a security breach on your site, you want your users financial information to be protected. Moreover, you want to architect your data storage for any current and future stakeholder requests. When it comes to payments, there are generally many stakeholders, let’s talk about a handful of them.</p>

<p>You are going to have technical stakeholders: your managers and other product teams who have questions about payments. Business entities that have to report their earnings for filing taxes and reporting earnings to shareholders who will need their data from you. As someone buying/selling online, your data needs to be stored in a way to make sure you don’t break compliance (PCI/SOX etc). Support/operations will be your stakeholders when customers have problems paying and come to you for help. Let’s get into how we can address these asks.</p>

<ol>
<li><p><strong>Avoid storing sensitive personal information</strong>: Any application sending payments information such as credit card numbers, cvv to their server will have to become PCI compliant. This a financial and logistics burden which you can avoid for the most part by using a gateway provider such as Braintree/Stripe/Adyen. Usually your browser/mobile app will authenticate with the gateway and get back a token, which you can relay back to your server. This removes the danger of accidentally logging payments data, since the only data your server will see is a payments token. Even if you do get data breached, these tokens would not be useful to the attacker. This also removes the need for you to be PCI compliant which is tens of thousands of dollars in yearly expenses.  More data you should avoid storing include any plaintext passwords and secret keys, common web best practices.</p></li>
<li><p><strong>Freeze request/response from external providers</strong>: You need to store every single request/response that you are making to your external providers, ideally in an append-only data storage. One of the common requests that we get in payments is to recreate the transaction as it happened. This is hard to do without storing the data at point in time of the transaction. Moreover, the business logic related to transaction such as taxes, fees calculations also need to be versioned and stored so that you can recreate the transaction at a certain point in time.</p></li>
<li><p><strong>Encourage immutability and lower side effects</strong>: Similar to the point above, you should never destroy payments or charging data. There are easy ways to archive and hide the data from users. This is very useful for historical financial reporting, triaging potential inefficiencies in your charging/billing process, and dealing with any disputes with your payments provider.</p></li>
<li><p><strong>Denormalize and index for searchability</strong>: Payments data is generally more write heavy but needs to be stored in a way for ease of triaging. Most payments providers provide unique request ids with their calls, and you should supply your own if that is possible. That way, you can set up bidirectional tracking, so that each individual call to payments is trackable from both sides. Setting indices on those unique ids is helpful for search. If the table is growing too large, it is useful to only keep upto a certain limit in your app and store the rest in a data warehouse such as AWS Redshift or Google Bigquery. The data warehouse strategy also enables you to normalize the data if you want easier access to data in one place and avoid expensive joins.</p></li>
<li><p><strong>Prefer cents as units instead of dollars</strong>: You can avoid a whole class of floating point bugs by storing in cents and using integers as opposed to float for all your arithmetic. Since floats in computing are really a representation of an infinite number, the can only be approximation and lead to hideous rounding errors. This is a good read on that topic https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency. Using established tools such as the money gem for currency in ruby is also very useful.</p></li>
</ol>


<p>The above strategies will be useful for both internal and external users of your payments stack and help to protect your money and time when it comes to payments data. Please reach out via comments or <a href="mailto:avi@aviadas.com">email with feedback!</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web Payments by First Principles: Testing]]></title>
    <link href="http://avidas.github.com/blog/2017/05/19/web-payments-by-first-principles-testing/"/>
    <updated>2017-05-19T16:21:00-04:00</updated>
    <id>http://avidas.github.com/blog/2017/05/19/web-payments-by-first-principles-testing</id>
    <content type="html"><![CDATA[<p>In recent years, payment API providers have made integrating payments much easier than it used to be. Instead of dealing with banks and exchanges, ecommerce apps can integrate with payment gateways that will allow accepting any form of credit cards, and most payment methods such as Apple Pay and PayPal. Large pdfs with instructions manuals are replaced by intelligent documentation sites with walkthroughs and tutorials. Despite that, it is not uncommon to hear developers referring payments as their least favorite part of the development process. Payments integrations are often seen as a necessary evil, to be done once, and hopefully be forgotten thereafter. Often the reasoning is that investing in better payments integration is often not a profit center for companies.</p>

<p>I have worked the last few years in the online payments industry, building APIS, sdks and reliability tools. While payments integration has gotten easier, developers still do make mistakes which are easily avoidable. Here are some of the best practices I would recommend for testing payments in your applications.</p>

<ol>
<li><p><strong>Isolate interation between application code and payment gateway in a package</strong>: Once an app grows to a certain size, it may have different ways of interacting with payments gateways. You may be accepting recurring payments and accepting webhooks from the payments provider, just in time checkout or interact with point of sales systems. Having your own package that abstracts out interaction with the payments APIs can help centralize all outgoing requests back and forth with the payments API. You can add your own logging and monitoring, stub out the interaction with payments API to have faster unit tests and centralize knowledge about how you serialize and deserialize messages from and to your payments provider.</p></li>
<li><p><strong>Sandbox Testing</strong>: Most payment API/gateways expose a sandbox environments where you can test out a real integration with the API without moving any money. Ideally your integration tests running continously in Jenkins/Travis/Circle CI should be hitting those endpoints.</p></li>
<li><p><strong>Monitoring</strong>: You should monitor your sandbox integration as well as your live system. What does the graph of 200s vs 400s HTTP response codes from the payments API look like? Are you getting unexpected 400s? How about 500s? What does the response times look like?</p></li>
<li><p><strong>Automated QA</strong>: To avoid putting undue stress on your computation and database resources, background tasks are common strategies to do break down calculations for common payments needs such as reporting and analytics. When calculations are done in partial chunks, automated jobs that test whether those calculations have been done properly can reduce a lot of load for your support and developers when something goes wrong midway between a job, or failure.</p></li>
<li><p><strong>Negative/Failure Testing</strong>: Special card numbers provided by payments providers can help you recreate payment declines due to potential denial from processors for reasons such as not enough funds in account. You may also be able to test for rejections due to fraud and compliance. This helps lower the range of potential unknown errors your site may run into, especially when expanding to new markets or accepting more payment methods.</p></li>
<li><p><strong>Live testing</strong>: Live testing against payment providers is often tricky, and can led to accounts getting shut down if there is undue load on the API. Despite that, some testing in live is absolutely necessary before you can be confident that on release day, your integration is working as expected.</p></li>
<li><p><strong>Test for absence of sentive information</strong>: Storing user information such as credit card number or passwords is a very common way of violation of PCI compliance. Regex patterns can be used to make sure that neither your logs nor your database is storing sensitive information.</p></li>
</ol>


<p>I intend to write more posts in this series, covering topics such as considerations before and after going live with payments, when scaling up and so on. If you liked this post, please share or comment.</p>

<p>If you have feedback on this blog post or integrating payments, please <a href="mailto:avi@aviadas.com">feel free to reach out!</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Takeaways from MicroConf Starter 2017]]></title>
    <link href="http://avidas.github.com/blog/2017/04/21/takeaways-from-microconf-starter-2017/"/>
    <updated>2017-04-21T17:55:00-04:00</updated>
    <id>http://avidas.github.com/blog/2017/04/21/takeaways-from-microconf-starter-2017</id>
    <content type="html"><![CDATA[<p>With the rise in VC funded startups, there was not a big community for individuals and small teams launching and supporting digital product businesses with their own profits. Rob Walling and Mike Taber noticed that need and created MicroConf, a conference for self-funded software startups.</p>

<p>I was at MicroConf Starter last week. In its 12th year, MicroConf split into Starter and Growth Tiers, the starter edition for people who do not make a full time income from digital products. If you are the kind of person who enjoys taking an idea to a functional product that solves real world problems, MicroConf is a conference where everyone has that shared goal.</p>

<p>Some at MicroConf have launched products and were doing quite well from a digital product business, let it be online courses, software plugins, SAAS etc. There were also number of people who wanted to learn more about find the right idea, product-market fit, sales and marketing.</p>

<p>I really enjoyed the pragmatic voice of the conference, keeping focus on balance. The conference does not shy away from the fact that it is not a easy task to bootstrap software products.</p>

<p><a href="https://shai.io/MicroConf/">MicroConf has great notes</a> for the whole conference. Instead of trying to go through the whole conference, here are some of my takeaways from MicroConf Starter 2017.</p>

<ol>
<li><p><strong>Consistency</strong>: Rob Walling emphasized start of the conference that the success of MicroConf will be what these two days can do for the remaining 363 days of the year. Often consistency made the difference in the eventual endurance and success of the product. Josh Doddy&#8217;s blog was fairly dormant for the first 12-14 months but peaking exponentially near its current runtime of 18 months. Mastermind groups were mentioned as a great way for a group of people who help each other stay on track.</p></li>
<li><p><strong>Finding an idea worth building</strong>: Multiple speakers mentioned the need to take a hard look at your stocks and assets. What questions do people keep asking you? What are you passionate about that other people find boring? What would you from 6 months ago find valuable? All these were from Ben Orenstein&#8217;s talk, one of my favorite at the conference. Patrick Mckenzie also touched on the same topic, to double down on what you do very well already and what the market already buys from you. Justin Jackson mentioned the need to find the groups you are best equipped to serve, and to research the audience and find ideas rather than thinking in your own head what the problem could be. Mike Taber also emphasized focusing if you are in fact the right person to be building that product.</p></li>
<li><p><strong>When to launch</strong>: An MVP should solve a well defined problem, not solve a portion of it or solve every possible iteration of the problem. However, the lack of polish is intentional to see how much inconvenience the customers would endure to solve their problem. Justin Jackson had a great point that an MVP should be the smallest product you could build to disprove a hypothesis. It was interesting to see multiple speakers mentioning the importance of putting your face right by your product, to encourage trust and take responsibility of what you are delivering.</p></li>
<li><p><strong>On user acquisition</strong>: Probably the biggest concern of fledgling products, user acquisition/outreach had dedicated talks. Some of the key points where to focus on conversations with users and doubling down on a few approaches e.g. SEO, Content, Ads rather than throwing in the kitchen sink. Looking for integrations with other products by forming partnerships was a common theme. Key questions to ask users were to ask how they were solving the problem today, what they have tried or ask for introductions to someone with that problem. In the beginning, unscalable strategies such as concierge onboarding are useful, specially for SAAS products.</p></li>
<li><p><strong>Getting results</strong>: Users are the best signals here, and if you have to chase people down to use your products, it may not be solving a real problem. Google analytics charts showing growth and conversion rates were part of almost every presentation. At the same time, reading those charts can be a hard story, often showing charts recovering from a flatline or decline to eventual success because the founders believed enough to carry on. Its hard to think convictions to be infallible in the face of data however, and sometimes it is time to give up.</p></li>
</ol>


<!-- more -->


<ol>
<li><p><strong>Pricing and revenue</strong>: Patrick Mckenzie mentioned that the objective to be a predictable sales process to make profit every month. The question of how much to charge for the product is tricky for founders. Both him, Ben and Jordan Gal emphasized the need for running experiments on your pricing page. Surprisingly enough, an increase in prices may often result in better customers in the long run even though in the short term your trials may fall.</p></li>
<li><p><strong>Motivation</strong>: People are motivated differently, but momentum is a key driver. Ben mentioned the need to reverse the relationship, not to wait for inspiration but to get started, feel the success and then get inspired. Sherry Walling mentioned using positive stress to fuel motivation. Lot of the folks in the conference started when they already had a lot of responsibilities, but often it is not time that is lacking, but the prioritization. Making more time is a function of reorganizing your priorities. Delegation is another important tool to master, especially for adjacent responsibilities to the key goals.</p></li>
<li><p><strong>Success and Failure</strong>: Jordan Gal had a great point that success is the ability to go from one failure to another without loss of enthusiasm. But success is quite subjective, and often reinforced by societies expectations. Perhaps it is worth asking if you are helping people solve problems. Failure is often more interesting part of the conference, to see what these speakers have tried but stopped when they did not deliver the results.</p></li>
<li><p><strong>Maintaining balance</strong>: Almost every speaker mentioned the need to for maintaining the balance in your life, relationships and family. Sherry Walling&#8217;s talk was dedicated to this, pointing out the need for self reflection and care. Taking retreats to step away from the grind is valuable, giving time to ask the important questions. Questions such as what pieces of day to day life is infusing you with energy? How can I readjust priorities so that I can live in those sweet spots more and do less of what is causing stress? The other really important point was about feedback loops, getting advice, forming mastermind groups and making sure that there are others weighing on important decisions</p></li>
</ol>


<p>Overall, I loved the theme and people at Micronconf. It was a blend of driven, helpful people interested in solving problems and owning software products. I would highly recommend the conference for anyone looking to launch products and interested in bootstrapping.</p>

<p>If you have feedback on this blog post or MicroConf, please <a href="mailto:avi@aviadas.com">feel free to reach out!</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What makes a great programming tutorial?]]></title>
    <link href="http://avidas.github.com/blog/2016/04/18/what-makes-a-great-online-tutorial/"/>
    <updated>2016-04-18T05:36:00-04:00</updated>
    <id>http://avidas.github.com/blog/2016/04/18/what-makes-a-great-online-tutorial</id>
    <content type="html"><![CDATA[<p>The Internet started as a publishing medium. It excels at enabling people to share their unique gifts. An amazing amount of content gets put out on the web everyday, far beyond someone can read in a lifetime. Massive amount of information also means information overload.</p>

<p>In software, it is common to use web tutorials to supplement one&#8217;s learning of a particular material. Following guidelines of someone who has already done it can really fast track development. Tutorials appear in various forms in the web. Some of the common formats are long form blogposts, videos and series of email newsletters. Some enjoy the personal touch that videos can offer; others enjoy being able to quickly skim a blogpost.</p>

<p>When you want to put your hard earned knowledge and valuable time into writing a tutorial, there are questions worth thinking about. Does the tutorial cater to its intended audience? Will it reach them? Can someone quickly skim the content and still get value? Is there a way to measure the effectiveness of online tutorials?</p>

<p><img class="left" src="https://files.slack.com/files-pri/T025F19MZ-F1ASWBLV8/pasted_image_at_2016_05_22_04_58_pm.png" width="800" height="800" title="Survey Questions" alt="Survey Questions"></p>

<p>To look for answers, I asked a carefully selected group of 150 people about their preference of tutorials. The focus was on software engineers/designers/entrepreneurs due to my familiarity and experience with the field. What emerged from their responses gives a blueprint for creating great online resources.</p>

<ol>
<li><p><strong>Real time feedback</strong>: If exercises or examples accompany a tutorial, multiple survey responders emphasized the need to check the user&#8217;s responses and provide interactive feedback to the user to guide them to the solution. Good examples are checkpoint multiple choice questions during Coursera/Udacity courses that you must complete to move forward with the course.</p></li>
<li><p><strong>Follow up</strong>: Several responders emphasized the need to provide contact information or other means to reach out to the author once they went through a tutorial. Providing a comments section or your email/twitter handle are great mediums for a reader to follow up.</p></li>
<li><p><strong>Address a concrete problem</strong>: Staying focused of a specific problem gives a tutorial depth. A differentiator can be to classify for the user whether the focus is academic and structured vs. a blogpost focused on solving a particular problem right now.</p></li>
<li><p><strong>Working examples</strong>: Interactive, working examples close to the content that builds on top of each other makes following along simpler. <a href="https://www.railstutorial.org/">Michael Hartl&#8217;s Ruby on Rails tutorials</a> came up as an example of detailed, comprehensive tutorials.</p></li>
<li><p><strong>Advanced user tutorials</strong>: Several user&#8217;s pointed out the need for tutorials that addresses advanced content. Making expectations clear about experience levels of intended audiences can be a huge positive for tutorials. <a href="https://www.raywenderlich.com/video-tutorials">Ray Wenderlich&#8217;s iOS tutorials</a> are good examples of the detail and level of research and understanding that can happen before putting out content on the web.</p></li>
</ol>


<!-- more -->


<ol>
<li><p><strong>Copyright</strong>: Sometimes an afterthought, it may be worth pointing out what license the content is released under. This can give the reader’s clarity on how to attribute the source when they use that content in production. Github makes this really easy with license options provided  during repository creation.</p></li>
<li><p><strong>Offer tangible short-term benefits</strong>: While this certainly applies more to blogposts rather than courses, focusing on offering user&#8217;s value short, medium and long term can improve the message of a tutorial. Moreover, an user may be more inclined to follow through the entire content of a tutorial if they are get that value at different stages of the tutorial.</p></li>
<li><p><strong>Timeliness</strong>: This could be hard to measure, but popularity of tutorials can be attributed to how current and relevant they are. As of the time of writing this blogpost, April 2016, there are lot of people looking to get into VR/AR, chatbots, AI and so on. Accounting for recency can certainly increase the reader counts of your posts.</p></li>
<li><p><strong>Continuity</strong>: It became clear through the responses that while people looked for tutorials to solve a particular problem, they return because they are looking for a subject matter expert. Producing a series of tutorials taking on different aspects of a topic can help with retention.</p></li>
<li><p><strong>Discoverability</strong>: This can go in the realms of SEO, but lot of responders responded to their favorite source of online tutorials with well-known sources. Coursera/Udemy/Khan Academy/YouTube and Google were all common ways people went around in finding online tutorials. If you do not want to solve distribution for the content you create, writing for more known blogs/sites can be a way to reach larger audiences.</p></li>
<li><p><strong>Formatting</strong>: A big part of the user experience, proofreading cannot be left for the last. In the tech space, prominent writers such as Paul Graham always attribute at the end of the blogpost all those who have helped proofread the content. Just passing it around to a few people before publication and basic spell checking/grammar checking can improve the user experience for tutorials.</p></li>
</ol>


<p>There are definitely caveats to this survey. As the person compiling this survey, it is at least slightly influenced by my biases. My target group is highly technically literate, so there is a bias towards modern tools. Perhaps it is worth taking into account the intent of writing tutorials, be it teaching, lead generation or growing a business.</p>

<p>Like most studies, this too should be taken with a grain of salt and in no way is sure way to produce great tutorials. Someone&#8217;s genuine passion, interest and the willingness to learn and teach find their ways to shine through content. However, just as the <a href="http://www.joelonsoftware.com/articles/fog0000000043.html">Joel Test for Software Development</a> companies is often a good checklist for expected standards of software companies, being aware of the reader’s needs and voice can lead to sharper, more helpful tutorials.</p>

<p>Research for this post was done by using Dripper, a twitter direct message automation tool that I helped build. Feel free to <a href="mailto:avi@aviadas.com">reach out</a> if you want to know more about the software!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[10 things I learnt going from 10k to a Marathon in 2015]]></title>
    <link href="http://avidas.github.com/blog/2016/02/09/10-things-i-learnt-going-from-10k-to-a-marathon-in-2015/"/>
    <updated>2016-02-09T23:28:00-05:00</updated>
    <id>http://avidas.github.com/blog/2016/02/09/10-things-i-learnt-going-from-10k-to-a-marathon-in-2015</id>
    <content type="html"><![CDATA[<p>If I were to think about running a 26.2 mile race at the start of 2015, the overwhelming feeling would be one of fear. I have only ever ran a 10k before and just signed up for the Austin 2015 half Marathon, my first ever half. The prospect of running twice the distance still seemed far away though. Flash forward to October 18th 2015, I finished my first Marathon with a 3:49:00 time. As I look back on this year, I wanted to put together some of my realizations during the whole process. </p>

<ol>
<li><p><strong>Running is a privilege</strong>:
Living somewhere where I can run safely, have trails to run on, be in good health to run are all privileges to be thankful for. Growing up in the developing world meant that it was hard pressed to find opportunities to be involved in outdoor activites. Having the time and space to exercise is a luxury that needed to be earned. I never ran in high school, and by the time I graduated college I could not run longer than 5k. Having the time to run, being in US where running is very much part of the culture has been a huge contributor to my running progress.</p></li>
<li><p><strong>Joining a running group is one of the best decisions you can make as a beginning runner</strong>:
Training with people better than you to improve is not unique to running. Start of 2015, I had no plans of running a marathon. In April, I joined the Austin Runners Meetup (ARM). In training long runs with ARM, I was able to build up the endurance for longer runs which made the progression to a Marathon much easier mentally. Training with other runners can definitely help you maintain the habit of running as well as improve your form and performance. Moreover, I found a new community of great people which has been very rewarding.</p></li>
<li><p><strong>Tying running with other activities you enjoy can make running much more consistent</strong>:
In Charles Duhigg&#8217;s <a href="http://www.amazon.com/The-Power-Habit-What-Business/dp/081298160X">Power of Habit</a>, he talks about the cue-action-reward pattern that most habits follow. Being aware of that pattern can help in building running as a habit. When run&#8217;s are followed by a delicious breakfast, you have something to look forward to. Trance music and podcasts help me maintain the flow during running. Travel is one of my favorite things and going to a new city for a race is something I eagerly look forward to.</p></li>
<li><p><strong>Running is a blissful release from life&#8217;s distractions</strong>:</p>

<blockquote><p>“All I do is keep on running in my own cozy, homemade void, my own nostalgic silence. And this is a pretty wonderful thing.” 
― Haruki Murakami, What I Talk About When I Talk About Running&#8220;`</p></blockquote>

<p> Distractions are part and parcel of our lives as more form factors emerge competing for our limited attention span. Often, this results in us not being aware of the passage of time. Running has been a great antidote to that problem for me. When running is effortful, you have to concentrate on the activity at hand and your entire focus is on the present moment. Long runs offer the prospect of seeing places and neighborhoods that you would not frequent otherwise. A slight breeze on a scorching summer&#8217;s day has never been more enjoyable.</p></li>
<li><p><strong>Once running is a habit, a chore becomes a craving</strong>:
When you start out running, it can be something you dread on your calendar. There is really no way to get past this without sustained practice, lowering the cognitive load with group associations and reward mechanisms. If you continue though, you realize at one point that you start craving the runs. Don&#8217;t get me wrong, it still requires a lot of mental effort to get up at 5:30am for that 20 mile run you need to do for Marathon training. But something about the combination of endorphins, habits built during running and seeing your friends out there on the trail can change running into something that you look forward to.</p></li>
</ol>


<!-- more -->


<ol>
<li><p><strong>You only compete against your past self</strong>:
This can vary a lot based on personality, but being slower than a lot of other runners has never really bothered me that much. As long as I beat my previous PR by two seconds, I would be happy. Running as an activity has been such a positive change for my life that the gratification from being faster than others has not been necessary at all. Lot of people starting out running also worry about their pace. However, beginner runners should actually run slower than the pace they think they can run at to avoid injury and build up distance and time.</p></li>
<li><p><strong>Respect your body&#8217;s adjustment mechanisms</strong>:
One of my foremost running philosophies is to avoid injury. Running is a full body exercise. Your heart, muscles, ligaments and joints all need adjust to the increased level of physical activity. In the beginning, you run out of breath since your heart is simply not used to pumping out the necessary amount of oxygen to the muscles. However, it can adjust remarkably fast, and you may be tempted to run faster than you should. Getting past muscle cramps is often the next step. Your joints likely will be the last to adjust though, and care should be taken to not run too fast too soon to avoid injury.</p></li>
<li><p><strong>Hard things are often the most rewarding</strong>:
If a Marathon was easy, the feeling of achievement would be less profound. You will be in pain after finishing a Marathon. However, if there is any time when pain feels besides the point, this is it. Finishing a Marathon feels good in a way that is hard to find a parallel in our day to day life. Rather you feel as accomplished as a battle commander from the middle ages after winning a long and arduous war.</p></li>
<li><p><strong>It will affect you positively in ways you may not expect</strong>:
When I talk to people about running, I consistently discover new and positive impacts running has had on their lives. For some people if is therapeutic and a great way to cope against troubles in life. It stands out as one of the activities that can have an <a href="https://en.wikipedia.org/wiki/Pareto_principle">80/20 impact</a> on your life, since the improvement in concentration and physical ability that you gain from running regularly can help in most other areas of life.</p></li>
<li><p><strong>It gives you the satisfaction of reaching your goals and finishing</strong>:
There are lot of things in life that can drag on, get pushed on and not have a clear resolution. Life is rarely black or white. Running is often a refreshing break from all that. Once you finish a race, it is done and over with, offering the joy of finishing something. Moreover, looking forward and planning for the race can become an exciting activity, as you look to vindicate your hard hours of training.</p></li>
</ol>


<p>Running is ultimately a very solitary activity. It does not matter if you train with a group, you are going to be on your own for long periods of time. This makes everyone&#8217;s running journey very personaI. If you are starting out running in 2016 or have certain training goals, I wish you all the best. If you have already been running races, I hope there was still something useful in this post for you. Either way, feel free to reach out or leave a note. I would love to hear from you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coffeehouse Coworkers]]></title>
    <link href="http://avidas.github.com/blog/2015/12/31/coffeehouse-coworkers/"/>
    <updated>2015-12-31T15:27:00-05:00</updated>
    <id>http://avidas.github.com/blog/2015/12/31/coffeehouse-coworkers</id>
    <content type="html"><![CDATA[<p>I had a problem.</p>

<p>It is fun to start side projects, but not always the easiest to stay committed and finish. Coffee has powered more projects than one can count. What also helps to stay focused and motivated is the company of like-minded individuals. Coffee and friends results in more and better products.</p>

<p>What can one do to reach more of those people?</p>

<p>Coworking spaces are hot in this economy. WeWork have recently stepped into the $10 billion club. In Austin, Capital Factory, Chicon collective, General Assembly and Link are just some of the spaces ranging from Accelerator/Incubator to just rentable office spaces. However, they are much more fitted for startups working out of a coworking space. Moreover, one spot can get boring pretty quickly.</p>

<p>What if you are a remote worker or work on side projects and wish there was a community you could cowork/share with?</p>

<p>In Austin, there are a few options for that as well. There is a great group called Cafe Bedouins who meet Tuesdays at 7pm in Houndstooth cafe to work on projects. I had a great time there, but thought why would this need to happen only on a particular weekday on a particular time? Weekends are often the times when side projects gets the attention anyway. By a stroke of luck, I ran into Adam Coulon at Cafe Bedouins, who is also really enthusiastic about coworking, and shared the same problem.</p>

<p>We considered platforms where people could spontaneously decide to meet and cowork on projects. Slack was the clear winner. It is really easy to set up, and it has spread like wildfire so people tend to be familiar with the product. Without futher ado we present <a href="http://www.coffeehousecoworkers.com/">Coffeehouse Coworkers</a>, made with <a href="https://github.com/rauchg/slackin">rauchg&#8217;s excellent slackin pluigin</a>. It&#8217;s a slack channel for people to find others and decide on places to cowork!</p>

<p>At the highest level, we love products and want their to be more finished products out there. It could be a blogpost, design concept, open source software or your consulting business. We think that better products happen in collaboration with like minded people. This may not be everyone&#8217;s cup of tea (or coffee rather), but our hope is to enable some people to optimize their workflow in a low commitment way.</p>

<p>If any of this interests you, join us at <a href="http://www.coffeehousecoworkers.com/">Coffeehouse Coworkers</a>. Right now, the members are mostly Austin based and in tech since that is our current demographic, but it does not really have to be limited to that. Austin is a great place to start since it has a lot of independent workers and great coffeeshops.</p>

<p>Happy coworking!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pycon Canada 2015 II: Python for Reliably Delivering Cross Platform Products]]></title>
    <link href="http://avidas.github.com/blog/2015/11/24/pycon-canada-2015-ii-python-for-reliably-delivering-cross-platform-products/"/>
    <updated>2015-11-24T20:41:00-05:00</updated>
    <id>http://avidas.github.com/blog/2015/11/24/pycon-canada-2015-ii-python-for-reliably-delivering-cross-platform-products</id>
    <content type="html"><![CDATA[<p>This is the second part of the two series blog post about my talk at PyCon Canada. Here is the <a href="http://aviadas.com/blog/2015/11/21/pycon-canada-2015-speaking-at-my-first-conference/">first part</a>.</p>

<h3>Proposal:</h3>

<p>Are you part of a team responsible for delivering cross platform products? End to end automated testing and communicating effectively are important when your project depends on multiple teams spread across functional domains. At Braintree/PayPal, we worked on a framework to reliably ship developer facing products. We will go over using BDD with Behave to describe test scenarios that speaks to both product and engineering, using Appium for mobile automation, and ElasicSearch and Kibana for storage and visualization of test results. You will see how the breadth of packages available on PyPI, the flexibility and ease of Python helped a team of developers whose core competencies were not in Python to collaborate on a common ground.</p>

<h3>Slides:</h3>

<iframe src="http://www.slideshare.net/slideshow/embed_code/55489167 " width="595" height="446" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen></iframe>


<p></p>

<h3>Video:</h3>

<p><a href="https://www.youtube.com/watch?v=YnCtm3ZDynY">Youtube link</a></p>

<h3>Github Repo</h3>

<p><a href="https://github.com/avidas/reliability-demo">Reliability Demo</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Speaking at PyCon Canada 2015: I]]></title>
    <link href="http://avidas.github.com/blog/2015/11/21/pycon-canada-2015-speaking-at-my-first-conference/"/>
    <updated>2015-11-21T12:38:00-05:00</updated>
    <id>http://avidas.github.com/blog/2015/11/21/pycon-canada-2015-speaking-at-my-first-conference</id>
    <content type="html"><![CDATA[<h3>High Level Takeaways</h3>

<ul>
<li>If you are giving a talk, too much content on slides means the audience is reading the slides instead of listening to you.</li>
<li>Design your talk expecting failure, and assume things like wifi will not work. An analogy would be the non functional escalator still being a staircase.</li>
<li>Show your talk to as many people as time allows. Every time I showed my talk to someone, I would find a new way to make the talk better.</li>
<li>It was amazing to hear from a 10 year old about his experience in coding. The barrier to entry to tech will keep falling in a noticeable way.</li>
<li>Teaching remains the best way to learn alongside with building things.</li>
<li>Coding for expectability is often as important as any considerations in a software project.</li>
<li>Science, data, web, systems and infrastructure were dominant themes at PyCon.</li>
</ul>


<h3>Getting to Toronto</h3>

<ul>
<li>It was really exciting to have my talk accepted at PyCon, since it was my first time speaking at a conference.</li>
<li>Getting through customs went as painless as they could have.</li>
<li>Toronto was colder than Austin, big surprise! Reminded me of times back in East Coast.</li>
<li>T-mobile data roaming was a breeze to set up, and worked mostly well across different providers.</li>
<li>Toronto had different modes of public transportation getting from downtown to airport: buses, streetcars, subway. Makes a city more interesting, although makes day to day travelling more complicated. Although, it does not take a whole lot to put public transportation in Austin to shame.</li>
<li>Asked a lady on the Subway for directions. It soon turned into a great conversation with her and her husband about life in Toronto and their experiences in US. For a big city, Toronto scores major points for having friendly people. Canadians have a reputation of being polite and helpful, and I would come to recognize it throughout my trip there.</li>
<li>My AirBnB was in Kensington Market, close to UoT where PyCon was taking place. It was a vibrant neighborhood, bars, restaurants, transportation nearby. My room was no hotel room, but a bed was all I needed.</li>
</ul>


<h3>Saturday</h3>

<ul>
<li>Morning started with me feeling the stress of not having all my slides and examples ready. I wanted to take some time to reflect on the great feedback I got from my team, but there was little time left.</li>
<li>Adding to my anxiety was the wifi connection not working. Thankfully, some organizers helped me out. Once the certificate issues resolved, it worked well for remainder of the conference.</li>
<li>Continental breakfast consisted of an assortment of cottage cheese, granola/yogurt, muffins, bread and coffee. No complaints.</li>
<li>Talked to Dusty, a Facebook engineer working on the Facebook infrastructure in Portland. Having lived in Canada, he had a lot to share about his experience there.</li>
<li>Morning keynote explored the history of Python interpreters and went into benchmarks. Benchmark related conversations can get subjective, but the speaker did a good job avoiding that.</li>
<li>Talks on application security, Emmy nominated CGI(!) and Docker deployment followed. The CGI talk was offered a very different viewpoint in software problems. Being highly computation intensive and long life cycles means the tradeoffs are very different from the usual SASS app/consumer product.</li>
</ul>


<!-- more -->


<ul>
<li>Fully vegetarian lunch would have made some of my friends in Austin very happy.</li>
<li>Talks on code quality and scaling followed in the afternoon. The scaling talk did not cover scaling a python service, but rather maintaining OpenStack, in the order of 4-5 million lines of code written in Python.</li>
<li>SaltStack for deployment and fraud detection were next on the agenda. Fraud is very relevant for those in the payments industry, so I was very interested in the talk. Most of the talk focused on Apache Spark, and the fraud aspects covered some of the usual signals such as checking location of IP against location of the credit card.</li>
<li>Karen Rubin&#8217;s ending keynote was the highlight of the day. As a director in Quantopian, she benchmarked placing bets on companies with female CEOs and bet them against the S&amp;500. She presented her initial model, and presented various tunings to her model. Factoring in arbitrage during the initial period when a female CEO got brought in, divergence due to outliers such as Meg Whitman or Marissa Mayer, and female CEOs brought on to replace poorly performing male CEOs were some of the considerations. Even with all, her strategy still handily beat the S&amp;P500! This makes one wonder how segmenting CEOs further by backgrounds would perform against the market.</li>
<li>At the end of the day, I got to talk to some engineers from Dropbox and Heroku. Pain points with experiences doing online payments came up, when the tradeoff was unfortunately often to trade integration pain points with services more susceptible to fraud.</li>
<li>Over dinner, I chatted with a core group who have grown the Python meetup scene in Toronto from a handful of people to a conference with many hundreds of people today. We talked about their efforts in teaching Python to children and disparity on expectations as a software engineer based on location and industry.</li>
<li>In the evening, I spent more time going through the presentation, trying to replace more slides with workflow diagrams.</li>
</ul>


<h3>Sunday</h3>

<ul>
<li>Sunday was the day of my talk. The day started later than first, and I took full advantage by going for a run around downtown Toronto. As I ran by the CN tower and the financial district, the tourist density went up significantly. It was a colder morning, but running in a new city is a tradition.</li>
<li>Greenroom at PyCon Toronto very wisely offered speakers the chance to check on their presentation before the actual event. There were issues with fonts, color schemes, and terminal positioning that I was happy to discover. The talk would switch between terminal, emulator, sublime text and slides. I had to make sure that the transition would be as smooth as possible.</li>
<li>It was great to run into old acquaintances from NYC, James Powell of dontusethiscode fame, and Paul Longston. Both are doing terrific things for the Python community.</li>
<li>Morning talks were heavy on REST, Django and Web. One unfortunate thing about speaking at a conference is that you can miss some interesting talks. I definitely would have checked out the other talk given in my time slot on legacy code by Scott Triglia, an Yelp engineer. But that&#8217;s what videos are for!</li>
<li>It was time for my presentation, with a good number of people in the audience. Checked in with Gabriel, the host at my room. After mike and projector check, it was time. Here we go.</li>
<li>During my talk, I focused on slowing down and focusing on the audience instead of the slides. The demos worked as well as I could have expected! Having the commands stored in the terminal which I could Ctrl+R through avoided a lot of potential issues. One issue that came up was spacing issues in the terminal. As far as things that could have gone wrong, that was a minor one.</li>
<li>Talk lasted for about 29 minutes, and I was pretty happy to get a couple questions at the end. Someone reached out and mentioned that the whole setup was awesome. It was very relieving to have it finally be over and feel the sense of closure.</li>
<li>As a productivity junkie, the afternoon talk on deliberate practice and learning to code was a great one. How can we better realize if we are actually practicing deliberately? It raised some compelling discussion at the end.</li>
<li>At the end of the conference, it was great to see the organizers taking some time to do some well earned celebration.</li>
</ul>


<h3>Part II</h3>

<ul>
<li>I intend to do a followup blog post with the contents of my talk, so stay tuned!</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Realtime Apps with React, Socket.io and Node.js]]></title>
    <link href="http://avidas.github.com/blog/2015/09/06/building-realtime-apps-with-react/"/>
    <updated>2015-09-06T11:16:00-04:00</updated>
    <id>http://avidas.github.com/blog/2015/09/06/building-realtime-apps-with-react</id>
    <content type="html"><![CDATA[<blockquote><p>Update: Udemy has generously granted a free coupon for the readers of this blog for their <a href="https://www.udemy.com/learn-and-understand-reactjs/learn/">React JS and Flux</a> course. Use the code <code>avidasreactjs</code> and the first 50 readers will get free access to the course!</p></blockquote>

<p>The importance of delivering realtime feedback to users is more than ever. Gone are the days when chats or games were the only applications of realtime software. Starting from finance, advertising or education, having a realtime component to your web application will elevate the user experience.</p>

<h3>Socket.io</h3>

<p>From <a href="http://socket.io/">socket.io&#8217;s homepage</a>, it is a library that enables real-time bidirectional event-based communication. It has two parts, a client side library that runs in the browser and a server side library for node.js. In recent times, this has become the de facto way of doing realtime web applications in the node.js world. Key reasons behind this has been the way it abstracts away the overhead of maintaining multiple protocols, while carrying on similar primitives from <a href="https://nodejs.org/api/stream.html">Node streams</a> and <a href="https://nodejs.org/api/events.html">eventEmitter</a>. Some of its other powerful features include being able to stream Binary data, broadcast to multiple sockets and being able to manage connected client data from the server.</p>

<h3>Architecture</h3>

<p>The WebSocket protocol is a W3C standard that enables interactive communication between browser and server. It functions as an Upgrade request over HTTP 1.1. However, since all legacy browsers and devices do not have support for WebSockets, it&#8217;s cross-platform abilities get limited.</p>

<p>Socket.io itself is a library to build realtime applications. It will try to upgrade to and use the Websocket protocol if available. Socket.io depends on another libray called Engine.io which exposes a Websocket like API but provides fallbacks to other transport mechanisms such as XHR and JSONP polling. This enables application developers to write realtime codebases that are browser, device and transport implementation independent.</p>

<h3>Getting started with Socket.io</h3>

<p>This tutorial assumes that you have Node.js, npm and Express on your system.</p>

<p>In a directory create two files called index.html and app.js. In your app.js file, add the following</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">)();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">).</span><span class="nx">Server</span><span class="p">(</span><span class="nx">app</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">swig</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;swig&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;path&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// view engine setup</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">engine</span><span class="p">(</span><span class="s1">&#39;html&#39;</span><span class="p">,</span> <span class="nx">swig</span><span class="p">.</span><span class="nx">renderFile</span><span class="p">);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;view engine&#39;</span><span class="p">,</span> <span class="s1">&#39;html&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// server and routing</span>
</span><span class='line'><span class="nx">server</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">8080</span><span class="p">);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s1">&#39;index&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>We set up the view engine and serve up a basic index page. If this part looks unfamiliar, please check out <a href="http://expressjs.com/guide/routing.html">Express docs</a>. Now add the following in app.js.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">io</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;socket.io&#39;</span><span class="p">)(</span><span class="nx">server</span><span class="p">);</span>
</span><span class='line'><span class="c1">// socket.io demo</span>
</span><span class='line'><span class="nx">io</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;connection&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">socket</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">socket</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;server event&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">foo</span><span class="o">:</span> <span class="s1">&#39;bar&#39;</span> <span class="p">});</span>
</span><span class='line'>  <span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;client event&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p> We create a new instance of socket.io and pass in the created express server as a parameter. As the server listens, whenever a new client starts a connection, we emit an event called server event and send the payload { foo : &#8216;bar&#8217; }. It also listens for &#8216;client event&#8217; and logs the payload once it gets the event.</p>

<p>In your index.html file add the following</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/socket.io/socket.io.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script&gt;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">socket</span> <span class="o">=</span> <span class="nx">io</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;server event&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">socket</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;client event&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">socket</span><span class="o">:</span> <span class="s1">&#39;io&#39;</span> <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>It includes the client side socket io library. After instantiating a new connection, it listens for the &#8216;server event&#8217; and when that event happens it logs the data and emits &#8216;client event&#8217; and sends the payload { socket: &#8216;io&#8217;}.</p>

<p>Run node app.js and fire up localhost:8080 in your browser. On the terminal you should see { socket: &#8216;io&#8217; } and on the console you should see { foo : &#8216;bar&#8217; } printed out. Congrats, you just did your first Socket.io app!</p>

<h3>Useful Socket.io Concepts</h3>

<h5>Message sending/receiving</h5>

<p>Socket.IO allows you to emit and receive custom events. Besides connect, message and disconnect, you can emit custom events and send with associated payload. Emit and Broadcast are ways to send events and on is the event listener.</p>

<h5>Server vs Client API</h5>

<p>There are some common functions between server and client side, but it is worth looking into the docs and understanding what is possible on the server vs client. Generally, the server side has much more features and capabilites and is capable of creating rooms and namespaces but both sides and send and respond to events.</p>

<h5>Rooms and Namespaces</h5>

<p>Socket.io provides built in abstractions to demultiplex the connected clients. Namespaces, identified by a path, can be connected via the following</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">socket</span> <span class="o">=</span> <span class="nx">io</span><span class="p">();</span> <span class="c1">//connects to default namespace &quot;/&quot;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">admin</span> <span class="o">=</span> <span class="nx">io</span><span class="p">(</span><span class="s2">&quot;/admin&quot;</span><span class="p">);</span> <span class="c1">//connects to the namespace specified by the path &quot;/path&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>After a client connects with <code>var socket = io('/admin')</code> , we can send message only to the admin namespace.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">admin</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s2">&quot;admin alert&quot;</span><span class="p">,</span> <span class="s2">&quot;website traffic is up!&quot;</span><span class="p">);</span> <span class="c1">//the event will only be sent to the clients who connected to the admin namespace</span>
</span></code></pre></td></tr></table></div></figure>


<p>This enables more role or other criteria based distribution of socket.io events/messages within your application.</p>

<p>Rooms provide a way to further divide up clients within individual namespaces. Clients within a namespace can join and leave a room. By default, a client always is connected to a room idenfied by the sockets id. Hence it is possible to send targeted messages to a connected client via <code>socket.broadcast.to(&lt;SOCKET.ID&gt;).emit('test', 'message')</code>. Rooms could make more sense for particular themes whereas namespaces seem to fit well for user type/responsibilities.</p>

<h3>React and Socket.io</h3>

<p>Now for the exciting part, integrating React.js and Socket.io into an application. React.js is Javascript UI framework from facebook. You can follow some of the <a href="https://facebook.github.io/react/">initial docs</a> to get started with React. This tutorial will not go into great detail into the terminologies of React.js but refer to the official documentation if any of the React syntax looks confusing.</p>

<p>The basic idea of the app is to have an html input and a label. When someone types in something into the input box, it will update the label for anyone else who have an window open except for the person typing.</p>

<h5>Client side code</h5>

<p>Let&#8217;s start by changing your index.html to the following</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://cdnjs.cloudflare.com/ajax/libs/react/0.13.2/react.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://cdnjs.cloudflare.com/ajax/libs/react/0.13.2/JSXTransformer.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/socket.io/socket.io.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;mount-point&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;label-mount-point&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/jsx&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>     <span class="cm">/** @jsx React.DOM */</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">socket</span> <span class="o">=</span> <span class="nx">io</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">Input</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">_notifyServer</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">){</span>
</span><span class='line'>        <span class="nx">socket</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;client event&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">value</span><span class="o">:</span> <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span> <span class="p">});</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;update-label&quot;</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text&quot;</span> <span class="nx">placeholder</span><span class="o">=</span><span class="s2">&quot;Enter text&quot;</span> <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">_notifyServer</span><span class="p">}</span><span class="o">/&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>        <span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">Label</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">_onUpdateLabel</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">(</span><span class="nx">serverValue</span><span class="o">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">getInitialState</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">{</span> <span class="nx">serverValue</span><span class="o">:</span> <span class="s1">&#39;&#39;</span> <span class="p">};</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="nx">div</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;my-label&quot;</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">serverValue</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/h2&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">input</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Input</span><span class="o">/&gt;</span><span class="p">,</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;mount-point&#39;</span><span class="p">));</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">label</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Label</span><span class="o">/&gt;</span><span class="p">,</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;label-mount-point&#39;</span><span class="p">));</span>
</span><span class='line'>    <span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;update label&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">label</span><span class="p">.</span><span class="nx">_onUpdateLabel</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="nt">&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Server side</h5>

<p>The server side of the codebase can mostly stay the same, except we broadcast &#8216;update label&#8217; when &#8216;client event&#8217; is received.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">io</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;connection&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">socket</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">socket</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;server event&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">foo</span><span class="o">:</span> <span class="s1">&#39;bar&#39;</span> <span class="p">});</span>
</span><span class='line'>  <span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;client event&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">socket</span><span class="p">.</span><span class="nx">broadcast</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;update label&#39;</span><span class="p">,</span> <span class="nx">data</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Explanation</h5>

<p>On the client side, two React components called Input and Label are created and mounted by calling React.render. Input renders an html input box which calls the <em>notifyServer method whenever the someone types into the input field. The </em>notifyServer method then emits socket.io event called &#8216;client event&#8217; with the value of the input box.</p>

<p>On the server side, when &#8216;client event&#8217; is received with the data, the server calls socket.broadcast.emit and passes the data payload along. This means that all the connected clients except for the socket that generated &#8216;client event&#8217; will receive the &#8216;update label&#8217; event and the payload. This sends the message to everyone except for the person typing.</p>

<p>Back to the client side, the Label component consists on a div with a h2 element with is set to the serverValue state of the component. <a href="https://facebook.github.io/react/docs/component-specs.html#getinitialstate">getInitialState</a> sets the initial value to be &#8221; so initially the Label is empty. When &#8216;update label&#8217; is received, we call the _onUpdateLabel on label, which is an instance of Label. It sets the serverValue state of the Label component to data.value. This invokes the render method of the label component, and it generates a h2 header with the updated value of the serverValue.</p>

<!-- more -->


<h3>Advantages of Socket.io</h3>

<p>Many advantages of socket.io are</p>

<ol>
<li>The simplicity of the integration. Rolling your own realtime library is considerably more difficult due to multi-protocol, browser and device requirements.</li>
<li>Large community of users and support in multiple platforms. It is used from large companies to small startups, meaning developer support is in abundance. Socket.io released native clients on iOS and Android this year, expanding its reach.</li>
<li>It is stable as 1.0.0 has been released in 2014</li>
<li>It is completely free</li>
</ol>


<h3>Disadvantages of Socket.io</h3>

<ol>
<li>Socket.io has its own protocol, and it would not work with any custom Websocket implementation by default. The team has worked on this and support for this is getting better http://socket.io/docs/#using-it-just-as-a-cross-browser-websocket</li>
<li>Scaling across multiple servers when you have too many open connections for a single server is not something that you will get out of the box with socket.io</li>
<li>As with Realtime software, debugging can be complicated and you may need to include Redis or other layers of persistance if you want to gurantee message delivery</li>
</ol>


<p>Realtime on web and mobile is a secret sauce for many websites and apps these days and Socket.io is a dominant technology in that field. There are entire startups which would not be possible without Socket.io and definitely deserves a place in any web/mobile developers skills of expertise.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Guide to finding a technical cofounder]]></title>
    <link href="http://avidas.github.com/blog/2015/08/21/guide-to-finding-a-technical-cofounder/"/>
    <updated>2015-08-21T23:04:00-04:00</updated>
    <id>http://avidas.github.com/blog/2015/08/21/guide-to-finding-a-technical-cofounder</id>
    <content type="html"><![CDATA[<p>This has been happening at various meetups/hackathons/startup events sufficiently enough to warrant a blogpost. The situation is generally a variant of this, someone has an idea they are really convinced is the next big thing, the only thing stopping that from happening is making an app/website which requires a technical cofounder. The person with the idea is not at a position to afford the costs of hiring a full time/part time developer, so an equity sharing situation makes sense. Hackathons and tech meetups are where developers hang out, so approaching them there seem to be a good idea to find that cofounder.</p>

<p>There are a few problems to approaches like this. Software people who go to events like this gets pitched a fair amount, sometimes repeatedly on the same ideas. Also, we can be a rather cynical bunch, often as result of the kind of work that we do. This can result you not finding that engineer/hacker to build your app during a hackathon. Or they might do so during the hackathon, but simply drop off after.</p>

<p>It can get discouraging, specially if you are convinced about the idea and new to such events. Personally, I like idea people, specially because they bring in ideas from domains and problem spaces I would have no exposure to otherwise. Moreover, I also believe that cross-pollination of people from different groups is healthy and more products coming into the world is a good thing. Therefore, I would rather like to jot down some helpful tips which can maximize your chances of finding a technical cofounder next time you are looking for one.</p>

<ol>
<li><p><strong>Understand what motivates engineers</strong>: It&#8217;s important to understand what motivates engineers beyond just financial opportunity. If such an opportunity exists, you may be in pretty decent shape already and should really drill down on your exact plans on how the app would make money in the future. If you are less sure, there are still options. Can you prove that the app would have a broad user base? A great way to do this would be to prove that you have tried unscalable ways doing this already, be it door-to-door, personal know how, competitors etc. Most ideas can be validated using non-technical approaches. Knowing your problem space well will not only help you to build a business but also lend credibility when you are looking for a cofounder. Another thing that attracts is interesting technical problems or cutting-edge tech, so if your app involves either, it would be a positive. Good technical co founders can be extremely self-motivated once they realize that they have a problem is really worth spending time on.</p></li>
<li><p><strong>Manage expectations</strong>: It is best to present the idea and the opportunity and not expect immediate commitment. Generally people are busy, but if you have done your homework and can present the problem well, there is always a good chance. Not all engineers want the same thing, and lot are perfectly happy working where they are. If you do not have a proven user base or revenue plan yet, it does involve a certain risk-taking to get on that journey. As someone who wants to be a founder, you should seek technical co-founders with the same risk appetite as you.</p></li>
</ol>


<!-- more -->


<ol>
<li><p><strong>Don&#8217;t get discouraged</strong>: This may sound like packaged advice, but most likely, if someone says no, it is far more likely that they are rejecting the idea and not rejecting you. It suffices to be polite and ask for their reasoning. Most people are nice enough to talk about why they are not willing to work on that idea and you might get valuable feedback.</p></li>
<li><p><strong>Understand the software development cycle</strong>: The more you understand technology and what goes into building software, the better suited you are to recruit engineers. Timelines/delivery/delays, features and priorities, tradeoffs and optimizations are broad concepts that are just as important as picking languages, tools and platforms. Unsexy things such as debugging a database inconsistency could take up a lot more time than building the next cool feature. Prototyping an app during a hackathon is fun, the real work is afterwards and your story and contribution needs to be compelling enough for people to continue working.</p></li>
<li><p><strong>Use existing networks</strong>: Leverage existing networks such as college alumni and people you know might work better than approaching random hackers at events. If you have worked on other projects before, or are connected via friends to developers who are working on related projects, you would have a better chance of finding technical cofounders.</p></li>
</ol>


<p>Boom times in the valley/economy means that building an startup/company is an attractive prospect, and gives software engineers options on the table. Despite that, armed with a compelling idea, good buisness acumen, and clear idea of your contribution to the project, you have very good chance of recruiting engineers to help found your dream company. Good luck on the journey.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Evaluating React.js and Flask]]></title>
    <link href="http://avidas.github.com/blog/2015/08/05/evaluating-react-dot-js-and-flask/"/>
    <updated>2015-08-05T10:39:00-04:00</updated>
    <id>http://avidas.github.com/blog/2015/08/05/evaluating-react-dot-js-and-flask</id>
    <content type="html"><![CDATA[<blockquote><p>Update: Udemy has generously granted a free coupon for the readers of this blog for their <a href="https://www.udemy.com/learn-and-understand-reactjs/learn/">React JS and Flux</a> course. Use the code <code>avidasreactjs</code> and the first 50 readers will get free access to the course!</p></blockquote>

<p>As a connoisseur of the web, front-end frameworks have been been a fertile area of late. React.js from Facebook has taken much fanfare, and this post evaluates key ideas on react, and digs into why you could be interested in React. Staying true to single responsibility principle, React is a highly useful tool if you are doing web programming.</p>

<p>In this post, we will dive into building a Frontend using React.js and Backend built using the Python framework Flask. Flask is a minimalistic framework, and excellent when your backend becomes more and more of an API. Moreover, this facilitates the microservices architecture, where the decoupling of your your app into small unit of services can make it more maintainable and scalable.</p>

<p>We will cover some of the key ideas of React and Flask here, but it would be worth referring to the official documentation for <a href="https://facebook.github.io/react/">React</a> and <a href="http://flask.pocoo.org/">Flask</a> for getting started and understanding the philosophies of each framework.</p>

<h3>Key Ideas of React</h3>

<p>The core idea of React is the developers are better of leaving manipulating the DOM to battle tested framework code. Since the DOM has a tree structure, finding elements and manipulating them would need many traversals of a potentially very large tree.  Instead, what you modify is a virtual DOM, and React runs its intelligent diffing algorithm to directly update the DOM.</p>

<h5>React</h5>

<p>React itself is the UI library that will manage all the DOM updates as data changes. It&#8217;s takes the V of MVC frameworks, hence it can be used with other MVC frameworks such as Angular, Backbone or Meteor. It is quite easy to use React to manage specific areas of your application&#8217;s UI, rather than the entire app.</p>

<h5>Virtual Dom</h5>

<p>The virtual Dom is an abstraction layer between nodes in the real DOM and the view of the code you are modifying. When React selectively renders subtrees of the nodes in DOM based upon state changes, it achieves the following</p>

<pre><code> 1. Ensures that your DOM is always up to date with current state
 2. Reduces the need to re-render the DOM every time there is change in state
 3. Updating only the individual components on state change ensures high performance
</code></pre>

<h5>JSX</h5>

<p>JSX is a JavaScript syntax extension and it brings in a HTML/XML like familiar syntax for defining a tree structure with attributes. This is the syntax you can use to declare the changes in layout code and React will update the UI. It&#8217;s a bold approach, since developers are conditioned to keep layout code separate from Javascript. We will explain more React terminology later as we dive into some code.</p>

<h3>Key Ideas of Flask</h3>

<p>Flask is a microframework, which means that it trades a short learning curve for fewer out of the box functionalities, compared to heavier frameworks such as Django or Rails. It gives developers more freedom to use their preferable tools and libraries. However, it does have a list of officially supported <a href="http://flask.pocoo.org/extensions/">extensions</a> which when plugged in provide a wide breath of functionalities for a standard web app. Extensions behave as if they are native flask code.</p>

<p>We strongly recommend that you set up a <a href="http://www.virtualenv.org/">virtualenv</a> for this project, and you may also want to check out <a href="http://virtualenvwrapper.readthedocs.org/">virtualenvwrapper</a> for convenience. This is to provide your app with a sandboxed environment.</p>

<h5>Getting up and running with Flask</h5>

<p>Lets first install Flask</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pip install Flask
</span><span class='line'>
</span><span class='line'><span class="c"># For viewing and reusing app dependencies</span>
</span><span class='line'>pip freeze &gt; requirements.txt
</span></code></pre></td></tr></table></div></figure>


<p>Set up the following directory structure in your app.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>├── README.md
</span><span class='line'>├── app.py
</span><span class='line'>├── requirements.txt
</span><span class='line'>└── templates
</span><span class='line'>    └── index.html
</span></code></pre></td></tr></table></div></figure>


<p>Modify your app.py code to include the following</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="p">,</span> <span class="n">render_template</span>
</span><span class='line'>
</span><span class='line'><span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">index</span><span class="p">():</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s">&#39;index.html&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>We start by importing Flask and creating a new instance of a flask application. In flask, app.route is used to describe the behavior when users hit particular endpoints in the application. Here when user hits the index route, we render a template called hello world. By default Flask uses the Jinja2 templating language, but you can use any other templating language. In fact, we will not be covering Jinja2 in this blog post. Finally we tell python to call the run method of the app when invoked as a main function.</p>

<p>Let&#8217;s populate index.html with the following basic HTML boilerplate</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;UTF-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>Flask React Tutorial<span class="nt">&lt;/title&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>     <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;mount-point&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>         <span class="nt">&lt;p1&gt;</span>Hello world.<span class="nt">&lt;/p1&gt;</span>
</span><span class='line'>     <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now run the app with</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>python app.py
</span><span class='line'>// * Running on http://127.0.0.0:5000/
</span><span class='line'>// * Restarting with reloader
</span></code></pre></td></tr></table></div></figure>


<p>By default it runs on port 5000. Navigate to the endpoint and you should see the html page you just created. You are now up and running with Flask!</p>

<h5>Integrate React</h5>

<p>Easiest way to include React would be to just include them from a cdn. Let&#8217;s update the index.html to include React and and port our existing html to React. index.html will now look like</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;UTF-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>Flask React Tutorial<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://cdnjs.cloudflare.com/ajax/libs/react/0.13.2/react.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://cdnjs.cloudflare.com/ajax/libs/react/0.13.2/JSXTransformer.js&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/head&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">body</span><span class="o">&gt;</span>
</span><span class='line'>     <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;mount-point&quot;</span><span class="o">&gt;&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/body&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/jsx&quot;</span><span class="o">&gt;</span>
</span><span class='line'>     <span class="cm">/*** @jsx React.DOM */</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">FirstComponent</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">(</span><span class="o">&lt;</span><span class="nx">p1</span><span class="o">&gt;</span><span class="nx">Hello</span> <span class="nx">world</span><span class="p">.</span><span class="o">&lt;</span><span class="err">/p1&gt;);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="nx">React</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">FirstComponent</span> <span class="o">/&gt;</span><span class="p">,</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;mount-point&#39;</span><span class="p">)</span> <span class="p">);</span>
</span><span class='line'>     <span class="nt">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>Let&#8217;s go over the code. We first include the react and jsx libraries via the script tags and remove the earlier p tags. We set up a jsx script by specifying type=&#8221;text/jsx&#8221;. Then we call createClass method of React which creates a React component. React components are reusable units that you can use to compose your UI. The component must have at least the render method, which returns the virtual representation of a native DOM element or another component.
Next we call React.render with the first element and pass it the id of the div element on which we want the result of the render function to be. Run the app again to navigate to the same path to see the app again.</p>

<h5>Data binding with React</h5>

<p>For a more practical example, as well to demonstrate multiple components, let&#8217;s produce a type along data binding example. You can replace your script tag with the following</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/jsx&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="cm">/** @jsx React.DOM */</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">Input</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">updateLabel</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">){</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="nx">value</span><span class="o">:</span> <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">});</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">getInitialState</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">value</span><span class="o">:</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">componentWillMount</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="nx">value</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">value</span><span class="p">})</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;update-label&quot;</span><span class="o">&gt;</span>
</span><span class='line'>                      <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text&quot;</span> <span class="nx">placeholder</span><span class="o">=</span><span class="s2">&quot;Enter text&quot;</span> <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">updateLabel</span><span class="p">}</span><span class="o">/&gt;</span>
</span><span class='line'>                    <span class="o">&lt;</span><span class="nx">Label</span> <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">value</span><span class="p">}</span><span class="o">/&gt;</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">Label</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">div</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;my-label&quot;</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">value</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/h2&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">React</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Input</span><span class="o">/&gt;</span><span class="p">,</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;mount-point&#39;</span><span class="p">));</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As before, React.render is called at the very end on a component called Input and it is bound to the element with id mount-point. Inside the Input component a few other lifecycle functions are introduced.</p>

<p>The method getInitialState is called once before the component mounts and  responsible for setting for the initial state of a component.
componentWillMount is called directly before a react component is initially rendered. Inside componentWillMount, we invoke setState.</p>

<p>setState can trigger UI updates from event handlers and server request callbacks. It will always cause a re-render to happen. Once render is called, it returns a div with a input box and a React component called label. We attach the method updateLabel which gets invoked when the text inside the input box changes. It updates this.state.value.</p>

<p>State attributes are mutable within a component and are used to represent the interaction changes changes within a component. On the other hand, props are immutable and used to pass data from a parent component to a child. In this case Label is a child component of Input, and this.state.value for Input is passed to Label, which can access it by this.props.value. Thus Input passes the data entered into the input box to Label and causes it to re-render and display the text.</p>

<p>Fire up the server again and type something into the input box and the content gets updated in the h2 element underneath.</p>

<h5>Why React</h5>

<p>As it turns out, the selling points of React are not super hard to get and clear use cases became obvious.</p>

<ol>
<li><p>React is very efficient in the way it handles DOM updates. It is important however, to isolate that heavy rendering or interactions are the bottlenecks so that you are not optimizing prematurely and likely already have optimized database interactions and network calls.</p></li>
<li><p>SEO management overhead can be less with React compared to Angular/Ember since it can be rendered server side. The benefit comes from not having the overhead of rendering your page server side with something like PhantomJS and serving the HTML.</p></li>
<li><p>Reusable components make the code more reusable and testable, and the short terminology keeps the learning curve managable.</p></li>
<li><p>Since React can be rendered Server Side, you might completely get rid of your server side templating, further reducing the number of tools necessary to run your app.</p></li>
</ol>


<h5>React and Flask</h5>

<p>With their focus on SRP, React and Flask could be dependable and efficient parts of your stack. This is specially handy if you want to leverage the Numpy/Scipy stack for doing data analysis in near realtime and serve up a frontend with heavy user interaction. In a later post, we will look at exploring interactive applications and introduce Socket.io.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Browserify improves Client-side Development]]></title>
    <link href="http://avidas.github.com/blog/2015/07/16/how-browserify-improves-client-side-development/"/>
    <updated>2015-07-16T14:41:00-04:00</updated>
    <id>http://avidas.github.com/blog/2015/07/16/how-browserify-improves-client-side-development</id>
    <content type="html"><![CDATA[<h4>For a more modular, maintainable Frontend</h4>

<p>As Single Page Applications gain in popularity, the size of front end codebases keeps growing rapidly. For keeping these codebases maintainable, modularity becomes a priority. The easier it is to modularize code, the more incentives developers will have for doing so. With the ease of modularity with CommonJS, npm has seen explosive growth of packages published which has helped the Node ecosystem greatly. Browserify brings that ease to client side development leveraging the CommonJS module system. When used with build tools such as Grunt or Gulp, you can write modular client side code just like you would write your server side Node code, and Browserify takes care of the bundling for you. There is much less excuse these days to make everything global and attach to the window object!</p>

<h4>Leveraging npm modules</h4>

<p><img class="left" src="http://avidas.github.com/images/Modulecounts.jpg" width="800" height="670" title="Package Manager Traction" alt="Package Manager Traction"></p>

<p>Looking at the graph above is a big selling point when trying to evaluate the value Browserify can bring to your client side workflow. The graph is a comparison of the rate at which packages are getting published in different package managers Bower, PyPI, RubyGems. npm leads the pack easily. Recently, jQuery registry stopped accepting new plugins, with <a href="http://blog.npmjs.org/post/111475741445/publishing-your-jquery-plugin-to-npm-the-quick">new packages being published on npm</a>. Cordova recently announced the same change, moving plugins to npm. npm is now hosting much broader range of modules than only server-side Node.js modules and Browserify can help you leverage these modules on the front-end. The flipside of this as a module publisher is that publishing modules on npm now gives you access to a much broader audience since people might use the module on the browser, custom hardware etc.</p>

<h4>How it works</h4>

<p>In the CommonJS syntax, the &#8220;exports&#8221; object is the public API of a module and &#8220;require&#8221; can be used to include a module in your javascript file. Since browsers do not have require available, Browserify traverses the <a href="https://github.com/substack/browserify-handbook#how-browserify-works">dependency trees</a> of all the required modules, and bundles the dependencies into one self contained file that you can just include with a script tag on the browser. Browserify is aware of package.json and the order in which node_modules are resolved. Moreover, it supports built in Node modules e.g. path and gloabls e.g. Buffer so you have access of those in the client side as well.</p>

<h4>Transforms</h4>

<p>Core Browserify only bundles modules written in the CommonJS syntax, adhering to the single responsibility principle. However, there are other ways of modularizing client side code, AMD and Global Variables being the two usual ones. Instead of handling every possibly of modules, Browserify exposes a Transforms API so that a plugin can be built which can preprocess a file into Javascript in CommonJS syntax which Browserify can then consume. This means that you can write modular code just like your node codebases regardless of what module system your dependencies may adhere to. There are also lot of people writing in languages that compile into Javascript, such as CoffeeScript or TypeScript. To handle this, there are transforms available for AMD (deamdify), Bower modules (debowerify), globals (deglobalify), coffeescript(coffeeify), harmony (es6ify) etc. A simple search of Browserify on Github or npm brings up thousands of modules and attests to the <a href="https://github.com/substack/node-browserify/wiki/list-of-transforms">ecosystem around Browserify</a>. Delegating to transforms helps to keep the footprint of Browserify smaller, while makes it more extensible.</p>

<!-- more -->


<h4>Using with Build Tools</h4>

<p>Software is great when it just works and you do not have tinker with it all the time. Grunt/Gulp are great for this kind of configure once, build whenever workflow. Browserify is available as a command line tool primarily, but has Grunt and Gulp plugins which can be used to easily integrate Browserify into your build. There is also watchify, which can reduce build time by monitoring source files and incrementally rebuilding the front end bundle on the fly. For large projects, this is really useful to keep the build times small.</p>

<h4>Alternatives</h4>

<p>There are always alternatives available in the JavaScript world, and Webpack, RequireJS and Component being some of the major ones. RequireJS has been around for longer and primarily supports the AMD specification, but has support for CommonJS too. Webpack tends to do better with static assets that your client side requires and tries to cover a broader issue of bundling all static assets. With picking any tool, it&#8217;s good to be aware of the alternatives, the problem they were designed to solve, and benefits and drawbacks of each. It makes for <a href="https://gist.github.com/substack/68f8d502be42d5cd4942">quite interesting debate</a> at times as well.</p>

<h4>Resources</h4>

<p>Browserify has really good documentation and the <a href="https://github.com/substack/browserify-handbook">browserify handbook</a> is a great resource for an extensive runthrough. For getting started, the nodeschool module called <a href="https://github.com/substack/browserify-adventure">browserify-adventure</a> is very handy.</p>

<h4>Conclusion</h4>

<p>The browser community is unlikely to adopt a module system anytime soon. Harmony/ES6 includes a module definition but it will take time before it gets adopted by all the browsers. Moreover, there have been <a href="https://esdiscuss.org/topic/es6-modules-sorry">resistance from some notable developers</a>.</p>

<p>Browserify offers a great way to abstract away that issue. With access to a vast amount of modules, there is much less of a need for reinventing the wheel on the client side, and fewer script tags thrown around everywhere. Client side software development is evolving fast, and Browserify has made significant progress to minimize some of that complexity.</p>

<p>If you are using browserify/webpack in production, I would love to know the tradeoffs/issues you have ran into. Comments/feedback here or <a href="mailto:avi@aviadas.com">contact</a>.</p>
]]></content>
  </entry>
  
</feed>
